<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木夕木火のBlog</title>
  
  <subtitle>革命尚未成功，同志仍需努力</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wmjtxt.github.io/"/>
  <updated>2019-12-04T08:48:40.671Z</updated>
  <id>https://wmjtxt.github.io/</id>
  
  <author>
    <name>木夕木火</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用命令总结(持续更新)</title>
    <link href="https://wmjtxt.github.io/2019/03/18/linux_command/"/>
    <id>https://wmjtxt.github.io/2019/03/18/linux_command/</id>
    <published>2019-03-18T04:00:00.000Z</published>
    <updated>2019-12-04T08:48:40.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><a id="more"></a><table><thead><tr><th>命令</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><code>df -h</code></td><td>查看磁盘使用情况</td><td>磁盘</td></tr><tr><td><code>du -ah --max-depth==1</code></td><td>查看当前目录下的文件及文件夹的大小</td><td></td></tr><tr><td><code>du -sh</code></td><td>查看当前文件夹大小</td><td></td></tr><tr><td><code>ls -ltr</code></td><td>按修改时间排序</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件及文件夹个数</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>grep &quot;^-&quot;</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件个数</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>grep &quot;^d&quot;</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件夹个数</td><td></td></tr><tr><td><code>free</code></td><td>查看内存使用情况</td><td>内存</td></tr><tr><td><code>top</code></td><td>实时显示系统运行各项信息，相当于任务管理器</td><td>cpu</td></tr><tr><td><code>ps -ef</code>&#124;<code>grep sth</code></td><td>查看当前运行进程</td><td></td></tr><tr><td><code>rename &#39;s/\.cc$/.cpp/&#39; *.cc</code></td><td>将后缀为.cc的文件后缀修改为.cpp</td><td>批量修改文件名</td></tr><tr><td><code>rename &#39;s/\s/./&#39; *.c</code></td><td>将后缀为.c的文件名中的空格替换为”.”</td><td>批量修改文件名</td></tr><tr><td><code>rename &#39;s/^/00/&#39; [0-9]*</code></td><td>将文件名以数字开头的文件前面加上00</td><td>批量修改文件名</td></tr><tr><td><code>history</code>&#124;<code>awk &#39;{print $2}&#39;</code>&#124;<code>sort</code>&#124;<code>uniq -c</code>&#124;<code>sort -rn</code>&#124;<code>head -15</code></td><td>查看使用频次前15的历史命令</td><td></td></tr><tr><td><code>linuxlogo</code></td><td></td><td></td></tr><tr><td><code>wc [filename]</code></td><td>统计指定文件中的行数、字数、字节数</td><td></td></tr><tr><td><code>usermod -l [新用户名] -d /home/[新用户名] -m [旧用户名]</code></td><td>修改用户名</td><td></td></tr><tr><td><code>ln</code></td><td>链接，软链接，硬链接</td><td></td></tr><tr><td><code>scp</code></td><td>linux之间文件远程传输</td><td></td></tr><tr><td><code>more</code></td><td>与cat类似，可以翻页浏览,空格键下一页，b回上一页</td><td></td></tr><tr><td><code>less</code></td><td>与more类似，还可以使用vi编辑查找</td><td></td></tr><tr><td><code>awk</code></td><td>AWK是一种处理文本文件的语言，是一个强大的文本分析工具</td><td></td></tr><tr><td><code>:%s/foo/bar/g</code></td><td>全文查找替换</td><td></td></tr><tr><td><code>gg=G</code></td><td>vim中代码智能对齐</td><td>vim</td></tr><tr><td><code>nl [file]</code></td><td>查看文件内容，行号计算不包括空行，相当于<code>cat [file] -b</code></td><td></td></tr><tr><td><code>:%!xxd</code></td><td>vim中显示16进制</td><td>vim</td></tr><tr><td><code>:%!xxd -r</code></td><td>vim中从16进制恢复</td><td>vim</td></tr><tr><td><code>sed -i &#39;1,6d&#39; *.cpp</code></td><td>删除所有cpp文件的前六行</td><td></td></tr><tr><td><code>find -mtime -3</code></td><td>查找3天以内修改过的文件</td><td>如果3前面没有-，意思是3天前修改的文件，还有类似的-atime,-mmin</td></tr><tr><td><code>:split</code>, <code>:vsplit</code></td><td>vim分屏</td><td>vim</td></tr><tr><td><code>ifconfig+端口+ip</code></td><td>修改该端口的ip</td><td></td></tr><tr><td><code>nl file</code>==<code>cat -b file</code></td><td></td><td></td></tr><tr><td><code>:%s/\d\+/\=submatch(0)-1/g</code></td><td>vim中数字批量减1</td><td>vim</td></tr><tr><td><code>:50,100s/hello//gn</code></td><td>统计从50行到100行hello出现的次数</td><td></td></tr><tr><td><code></code></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h1&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wmjtxt.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://wmjtxt.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>LPA算法C++实现及模块度计算</title>
    <link href="https://wmjtxt.github.io/2018/11/12/lpa%E7%AE%97%E6%B3%95c++%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%A8%A1%E5%9D%97%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    <id>https://wmjtxt.github.io/2018/11/12/lpa算法c++实现及模块度计算/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-11-22T04:06:24.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，<br>因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。</p><a id="more"></a><p>我先看的LPA（毕竟算法思想最简单,hhh，怪我太笨了），又看了Louvain。<br>Louvain算法的代码，作者在文章里给了网址，是C++写的，我下到本地运行并认真研究了一下，写的真挺好的。<br>然后昨天突发奇想，干脆自己仿照Louvain的代码风格，用C++把LPA实现一下，<br>因为在网上只看到过Python和Java实现的LPA算法，还没见过C++实现的。</p><p>然后昨天把框架写好，今天把细节补全，最后又从Louvain的代码里搬来了模块度的计算部分。<br>最后调试好，就OK啦。</p><h1 id="1-LPA基本思想"><a href="#1-LPA基本思想" class="headerlink" title="1.LPA基本思想"></a>1.LPA基本思想</h1><p>给每一个节点添加标签，初始时可以以各自的nodeid作为标签，标签传播过程中将一个节点的邻居节点的标签中<br>数量最多的标签作为该节点的标签。标签即代表所属社区。</p><ul><li>1 初始时，给每个节点一个标签，通常以其id作为初始标签。</li><li>2 每个节点使用其邻居节点的标签中数量最多的标签更新自身标签。</li><li>3 反复执行步骤2，直到满足终止条件。(至于终止条件是什么，这个可以自己设置,<br>  比如我就直接设定迭代5次结束，也可以根据每次迭代模块度的增加程度来设定，<br>  网上有说直到每个节点的标签不再变化为止，其实这比较难判定，<br>  而且据研究，大部分网络经过5次迭代，其95%的节点标签都不再变化，<br>  后面每次迭代虽部分标签还在变化，但相比来说性价比不高了)</li></ul><p>LPA算法的优点是收敛周期很短，而且不需要任何先验知识。时间复杂度接近线性：对节点分配标签为O(n)，<br>每次迭代需要遍历所有的边两次，也就是O(2m)，所以时间复杂度为O(n+2m)，其中n为节点数，m为边数。</p><p>同步更新和异步更新还没搞懂，回头看看再说。</p><p><strong>缺点</strong> </p><ul><li>1 由于迭代过程中可能会出现随机选择的情况，所以LPA算法具有不稳定性，也就是同一个网络每次执行的结果可能都不一样。</li><li>2 可能出现巨型社区。</li></ul><p><strong>算法改进思路</strong></p><ul><li>目前还没</li></ul><h1 id="2-数据集"><a href="#2-数据集" class="headerlink" title="2.数据集"></a>2.数据集</h1><p><strong><em>dolphins</em></strong></p><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><p>代码都在<a href="https://github.com/wmjtxt/LPA.git" target="_blank" rel="noopener">我的github</a>上, 下面仅列出main函数代码.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lpa.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_time</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> rawtime;</span><br><span class="line">time ( &amp;rawtime );</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; str &lt;&lt; <span class="string">" : "</span> &lt;&lt; ctime (&amp;rawtime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//parse_args(argc, argv);</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"argc not 2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> filename = argv[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"filename = "</span> &lt;&lt; filename &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">time_t</span> time_begin, time_end;</span><br><span class="line">time(&amp;time_begin);</span><br><span class="line">display_time(<span class="string">"start"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sleep(3);</span></span><br><span class="line"><span class="function">LPA <span class="title">lpa</span><span class="params">(filename)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始模块度 = "</span> &lt;&lt; lpa.modularity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">lpa.labeled();</span><br><span class="line">lpa.display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">display_time(<span class="string">"end"</span>);</span><br><span class="line"></span><br><span class="line">time(&amp;time_end);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4.运行结果"></a>4.运行结果</h1><p><img src="/images/lpa1.png" alt="运行结果1"><br><img src="/images/lpa2.png" alt="运行结果2"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，&lt;br&gt;因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="复杂网络" scheme="https://wmjtxt.github.io/tags/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C/"/>
    
      <category term="LPA" scheme="https://wmjtxt.github.io/tags/LPA/"/>
    
  </entry>
  
</feed>
