<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木夕木火のBlog</title>
  
  <subtitle>革命尚未成功，同志仍需努力</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wmjtxt.github.io/"/>
  <updated>2019-09-07T01:32:31.394Z</updated>
  <id>https://wmjtxt.github.io/</id>
  
  <author>
    <name>木夕木火</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>京东面试风波之后续</title>
    <link href="https://wmjtxt.github.io/2019/09/06/interview4/"/>
    <id>https://wmjtxt.github.io/2019/09/06/interview4/</id>
    <published>2019-09-06T14:51:39.000Z</published>
    <updated>2019-09-07T01:32:31.394Z</updated>
    
    <content type="html"><![CDATA[<p>其实我知道，即使我通过了所有面试，进入池子里面，大概率也会被刷。但是那至少是合理的流程, 如果那样，我会心服口服。<br><a id="more"></a></p><p>前面说了，京东校招组给我回复了邮件。但我没有给他（她）回复，一是不知道说什么，二是我觉得我说什么其实都没什么用了。<br>我是几乎肯定以为他们会以怎样圆滑的方式来说服我接受这个结果。最小概率的情况，也是我仅有的一丝丝希望，就是我还能有机会进入京东最终的备胎池里。</p><p>但又觉得，如果那样，又有种奇怪的感觉。就好像买东西，有很多顾客买到了假货（或者说是有瑕疵的货物），只有我去找店家理论了，最终店家也只给我一个人换了货。<br>我的本意并不是这样。我的确很缺这样的机会，但我更在意的是，一件事情是否公平合理，何况这是与我极其相关的一件事。</p><p>杜甫有一句话，可能我不配说，但那话说的真好，大家也都知道，“安得广厦千万间，大庇天下寒士俱欢颜”。遇到一件事，不能只想到自己。</p><p>废话不多说了，说结果吧。</p><p>今天从西安回来的高铁上，接到京东校招组一位工作人员的电话，因为车上信号不稳定，就说好下车后我再打给她。</p><p>经历高铁加地铁，回到宿舍我才回电话，这时已经是两个小时后。她跟我详细说明了情况，并解释说是HR搞错了他们公司校招的原则，并不存在所谓“但凡是有工作经历的人就不能参加他们的校招”的说法，也跟复试面试官核实了我前面的面试没什么问题。</p><p>如下图所示，hr应该是误解了应届生身份的问题。<br><img src="/images/jd_help.png" alt="京东帮助"></p><p>她讲到这里，其实我就明白了。跟我原来想的那一丝丝希望是如此的相像。她说给我改了状态。还是很开心的，只是我没有太表现出来。不过，她也解释了后续还会进行筛选，我说我了解的。</p><p>临了，她也很客气说，有事随时可以联系她。我说，好的谢谢你。</p><p>我改高兴的，但并不稳，甚至可以说非常不稳，所以又高兴不起来。</p><p>好累啊，有希望却希望不大。</p><p>晚上，又收到滴滴的面试邀请，过几天还得去西安。钱包咕咕在叫了。</p><p>最后，我去查了状态，果然变了哈<br><img src="/images/jd_status.png" alt="京东面试结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实我知道，即使我通过了所有面试，进入池子里面，大概率也会被刷。但是那至少是合理的流程, 如果那样，我会心服口服。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>京东HR面挂——一个出乎所有人意料的原因</title>
    <link href="https://wmjtxt.github.io/2019/09/05/jdinterview3/"/>
    <id>https://wmjtxt.github.io/2019/09/05/jdinterview3/</id>
    <published>2019-09-05T12:35:19.000Z</published>
    <updated>2019-09-06T00:35:08.981Z</updated>
    
    <content type="html"><![CDATA[<p>9月3号早上面试后，我因为答得还不错，所以心情很好，以为京东稳了。后来在牛客网了解到京东HR面还要刷不少人，才觉得事情不妙，<br>但仍觉得应该问题不大。事实证明我还是太过于自信了。<br><a id="more"></a></p><p>中间还有很多插曲，太复杂就不详述了，直接说结果吧。HR面试完（电面），我还觉得回答的不错，应该问题不大，准备跟室友出去吃饭。顺手刷新了一下京东校招官网的状态，<br>醒目的灰色的令人沮丧的“HR面试未通过映入眼帘”，还没等室友看到，我就迅速关掉了网页。因为实在想不通为什么会被挂，所以我就给HR发了短信询问（没有打电话是怕打扰她，<br>也担心我情绪过于激动，表述不当）。</p><p>我以为就这样石沉大海了，没想到的是，没过多久，HR就打电话过来了。她解释说是因为我有几年的工作经历，所以是不能参加他们的校招的。<br>我表示很惊讶，简直闻所未闻，以前真没听说过还有这样的说法！然后，HR说前面两轮面试我表现的不错，但很可惜，由于这个原因无法给我通过。还说我可以参加社招。最后，可能是看我<br>还是难以接受，她说我可以发邮件跟京东校招组反馈这个事情。然后，谢谢再见，挂了电话。</p><p>这个时候，心情好了一些。说实话HR打电话过来我还挺惊讶的，她人真的挺好的。后来我跟室友也说了这个情况，大家好一阵感慨，甚至有些打退堂鼓：秋招怎么这么难啊？！不如回家种田算了！</p><p>不过抱怨归抱怨，我想了想，还真应该跟京东校招组反馈一下。就算说了没有用，我也要说，因为真的不合理。写了有几百字，详细陈述了这个事情，自认为言辞还算恳切，点击发送。仍然做好<br>石沉大海不被回复的准备。</p><p>后来去参加宣讲会，人真的超级超级多。找工作太难了。还要再努力点才行。</p><p>大概到了晚上，京东校招组回复邮件了。说会了解情况再给我回复，但其实我不抱什么希望了。</p><p>其实我也不是有多优秀，所有可能我压根配不上去大厂吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9月3号早上面试后，我因为答得还不错，所以心情很好，以为京东稳了。后来在牛客网了解到京东HR面还要刷不少人，才觉得事情不妙，&lt;br&gt;但仍觉得应该问题不大。事实证明我还是太过于自信了。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>京东二面</title>
    <link href="https://wmjtxt.github.io/2019/09/03/jdinterview2/"/>
    <id>https://wmjtxt.github.io/2019/09/03/jdinterview2/</id>
    <published>2019-09-03T03:23:32.000Z</published>
    <updated>2019-09-03T04:41:24.549Z</updated>
    
    <content type="html"><![CDATA[<p>幸运进入复试，还是通知去现场面，我又申请远程，然后面试官给我发邮件，说加微信面试。在牛客网看到有人说申请远程面试被拒绝，看来我还是幸运的，碰到的面试官都很好。<br><a id="more"></a></p><p>快到约定时间的时候，面试官发短信说延迟十到十五分钟，后来又说随时联系我。</p><p>大概9点半，开始面试。</p><ul><li>1.STL的底层实现，是不是线程安全的</li><li>2.int a[256]; char b[256]; sizeof(a), sizeof(b)分别是多大</li><li>3.vector底层实现</li></ul><p>然后，面试官说，来做道题吧。</p><ul><li>4.手写一个queue。10min</li></ul><p>写好后，拍照片，发给他，然后解释(手写程序，真的很乱)。</p><p>然后，面试官说，那再来一道吧。</p><ul><li>5.有n个数组，每个数组有m个升序排好的数，将所有数排序。15min</li></ul><p>我的方法复杂度是O(m*n<sup>2</sup>)，然后他问可以优化吗，我说可以用堆排序(其实建个堆就行，不需要堆排序)优化，又问具体怎么做……<br>其实我没想清楚都，最后在他提示下才明白，建个堆就好，复杂度提高到O(m*n*logn)。</p><p>然后面试官说就到这里。好突然的感觉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;幸运进入复试，还是通知去现场面，我又申请远程，然后面试官给我发邮件，说加微信面试。在牛客网看到有人说申请远程面试被拒绝，看来我还是幸运的，碰到的面试官都很好。&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="https://wmjtxt.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>京东一面</title>
    <link href="https://wmjtxt.github.io/2019/09/01/jdinterview/"/>
    <id>https://wmjtxt.github.io/2019/09/01/jdinterview/</id>
    <published>2019-09-01T02:36:03.000Z</published>
    <updated>2019-09-02T08:27:08.586Z</updated>
    
    <content type="html"><![CDATA[<p>笔试做的一般，编程两道都没AC。运气好还是收到了京东的面试通知，很惊讶，又暗自叹息恐怕还是抓不住。但也要加油啊。</p><a id="more"></a><p>时间很快来到9月1号早上，面试官的电话如约而至，甚至还提前了几分钟。</p><p>不出意外，一面问的很基础，总体答的还行，裸面居然挺过来了。可我自知，如果再问深一点，可能就答不上来了。</p><p>临了说应该会有后续通知，我想我得再突击一下了。</p><p>下面简单总结一下面试的知识点：</p><ul><li>1.new和malloc(这个几乎逢面必问, 没认真总结过，总感觉每次都说的不全)</li><li>2.new申请内存失败返回什么，malloc呢</li><li>3.在C++里，struct和class的区别</li><li>4.static的作用</li><li>5.如何理解static变量具有文件作用域</li><li>6.C++里的多态</li><li>7.虚函数</li><li>8.虚函数底层实现, 以及如何实现多态的</li><li>9.fread, fwrite, fprintf 区别</li><li>10.线程锁(我答了互斥锁，读写锁，他说还有自旋锁，我说没有用过, 看来知识还是要知道全才好)</li><li>11.explicit, 举例, 我举了string str = “hello”;这个, 他问explicit加在哪里，记不清了，我就说复制构造，他说构造函数，好吧</li><li>12.大端和小端，什么时候需要注意</li><li>13.知道哪些排序，说了快排、堆排序、归并，稳定的含义，哪些是稳定的</li><li>14.c里的哪些函数(比如random)可以在多线程里用</li><li>15.可重入函数，直接说了不了解</li><li>16.STL里有哪些序列容器, vector和list的区别</li><li>17.linux命令，查找当前文件夹及子文件夹下，三天内修改过的文件，我说用find，他就不让说了???</li><li>18.最后问项目里我负责哪些部分，我说去重和倒排索引，简单说了说，没聊太深(太深我也记不清了)</li><li>19.(补一个)软连接和硬链接</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔试做的一般，编程两道都没AC。运气好还是收到了京东的面试通知，很惊讶，又暗自叹息恐怕还是抓不住。但也要加油啊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>美团面试</title>
    <link href="https://wmjtxt.github.io/2019/08/27/meituan-interview/"/>
    <id>https://wmjtxt.github.io/2019/08/27/meituan-interview/</id>
    <published>2019-08-27T01:20:35.000Z</published>
    <updated>2019-09-01T03:05:59.138Z</updated>
    
    <content type="html"><![CDATA[<p><strong>后续</strong>：二面很惨，不说了，学习去了QAQ</p><a id="more"></a><p><strong>背景</strong>：投了之后也没管，可能是内推，然后周五下午突然接到电话，约电话面试，问我哪天有空，惊讶+紧张之余，我说要不就明天吧(我怕拖太久机会溜走了，毕竟是秋招的第一个面试啊),<br>    然后他说明天周末啊，我们(美团)周末休息，约工作时间吧，那我说下周一吧，他说那好，周一早上10点半行吧，我说好。挂了电话才想起了周末有浦发的面试，要去西安，周一早上赶回来没多少时间准备了。瞬间觉得完了，但也不好意思打电话改时间了。<br>    就想硬着头皮上吧。</p><p>这还没完呢，周六是京东的笔试，周末是快手和头条的笔试。周末去西安的高铁上还做了几套快手往年的笔试题，然后紧赶慢赶提前到达面试地点，还算顺利地面试完，下午4点半，刚好快手的笔试开始，可是没有找到有网的地方，只能放弃。后来找了家网吧，等到7点做了头条的笔试。然后去西安城墙看了看，就坐火车回学校了。</p><p>然后本来8点到站的火车晚点了一个小时，绿皮火车真是卑微啊，都快到站了，也没有资格进站，要在一个小站苦等。等的时候，有几个女声跟乘务员说她们到站还要转火车，赶不上的话怎么改签，乘务员欢快地回应说你们去7车找列车长说, 要不怎么体现他列车长的作用。等的时候无聊，我也简单看了下面经，想着回去应该还有时间看看基础知识。到站后下车出站，还下雨了，赶上公交，吃了早饭，9点半赶回宿舍。跟室友唠了两句，然后讨论头一天的头条编程题，突然接到电话，是那个熟悉的号码，心想惨了，一点没准备啊（这时才10点05分左右）。这一面就是一个小时。</p><p>面试时随便记在一张纸上，所以比较乱。</p><p>一面(电面)</p><ul><li>1.自我介绍</li><li>2.malloc与new</li><li>3.先问知不知道C++11,我说知道点，然后问了智能指针, 说了share_ptr,weak_ptr, 问share_ptr跟普通指针比有什么优点，说了更安全，问还有什么，我说不知道了</li><li>4.问会不会STL,我说会一点, 然后问map和multimap, multimap的底层实现, 我说都是他们红黑树，但不知道multimap具体怎么实现,<br>  然后问如果是我会怎么去实现，我说对相等节点建立开链来实现。(回头好好看看STL去)</li><li>5.平衡树(应该就是指AVL)和红黑树, 为什么红黑树应用更广泛</li><li>6.完全二叉树和满二叉树，这里还有点插曲，我说满二叉树节点数2^n-1, 他说不对，然后说后面看书上怎么说，也可能他记错了(后来证明就是他错了)</li><li>7.堆排序过程</li><li>8.TCP三次握手, 以及为什么必须有第三次的ACK. 然后接着还问了全双工, 半双工和单工</li><li>9.计算机网络各个协议的端口号，这个没答出来，TCP的都忘了……我说TCP的记不清了，FTP的是20,21，HTTP的是80（其实模模糊糊的也不知道对不对）</li><li>10.进程和线程的区别, 多线程相对于多进程的优势和缺点，缺点我说了多线程，当其中一个线程挂掉，该线程所属进程就会挂掉，问为什么，我说不知道..</li><li>11.多线程，读多写少的情况（比如平均读1000次写1次）怎么处理。后来实在不会, 问我知道读写锁吗，我说知道，但不会用, 说可以去了解下+-+</li><li>12.然后结合项目问，客户端连接服务器的时候，能ping通但是连不上服务器, 会是什么原因？答有可能到最大连接数了，问还有呢？不知道，最后他问我知道防火墙吗，我说听说过，但不清楚原理，然后他还给我解释了一下</li><li>13.客户端给服务器发送数据(send)的时候，突然服务器断开，此时send返回什么, 记不清了，我答的是要么0要么-1</li><li>14.signal</li><li>15.epoll</li><li><p>16.socket阻塞与非阻塞, 这个真忘了，没说出来，他说没事，如果想不起来的也不要瞎说，瞎说反而给面试官印象不好</p></li><li><p>最后问我有什么问题，就简单问了他们的面试批次什么的</p></li><li><p>然后下午还在睡觉，就来电话，没接到，我又打过去，没通，又打过来，说我过了，下一面是视频面，约个时间，我说那周四吧，说那好周四上午10点半。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;后续&lt;/strong&gt;：二面很惨，不说了，学习去了QAQ&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="面经" scheme="https://wmjtxt.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="2020校招" scheme="https://wmjtxt.github.io/tags/2020%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>Git Rebase的用法</title>
    <link href="https://wmjtxt.github.io/2019/08/18/rebase/"/>
    <id>https://wmjtxt.github.io/2019/08/18/rebase/</id>
    <published>2019-08-18T11:25:12.000Z</published>
    <updated>2019-08-20T15:41:24.935Z</updated>
    
    <content type="html"><![CDATA[<p>其实我用Git不多，<code>git rebase</code>命令之前也都没听说过，偶然在牛客网看面经看到有人说面试官问<code>git rebase</code>和<code>git merge</code>的区别。才想到去了解一下它。</p><a id="more"></a><p>廖雪峰的官方网站上有提到<code>git rebase</code>的用法<sup>[1]</sup>，并举了一个例子，但他的例子不好，评论里也有人说到。<br>评论里有位同学详细说了<code>git rebase</code>的用法, 说得很好, 摘抄如下：</p><hr><p>一开始按照教程演示去操作，因为两个目录修改的不是同一文件，<code>git pull</code> 后直接合并了没有冲突，所以git rebase有效果。如果<code>git pull</code>后提示有冲突后，先不管冲突的代码，因为修改后执行rebase还是变回有冲突的代码。先执行<code>git add .</code>和<code>git commit -m &#39;xxx&#39;</code>。在执行git rebase 终端提示：Resolve all conflicts manually, mark them as resolved with “git add/rm &lt;conflicted_files&gt;”, then run “git rebase –continue”。这时再手动修改代码解决冲突，执行<code>git add .</code> 再执行 <code>git rebase --continue</code>就有效果了。这时直接<code>git push</code>到远程仓库即可</p><hr><p>按照廖雪峰以及那位同学的评论还有Git官网文档，我总结一下<code>git rebase</code>的用法</p><h2 id="什么时候用到git-rebase"><a href="#什么时候用到git-rebase" class="headerlink" title="什么时候用到git rebase"></a>什么时候用到<code>git rebase</code></h2><p>当多人在同一个分支协作时，后push的同学需要先<code>git pull</code>，如果出现冲突，还要先处理合并文件，然后再push, 这时就算merge完成了，然后你通过<code>git log --graph --pretty-oneline --abbrev-commit</code>查看提交历史，会发现提交历史有分叉, 初一看有点眼花缭乱的感觉。而<code>git rebase</code>通过一系列操作, 可以将提交历史改为一条直线, 看起来清晰一点。</p><h2 id="git-rebase的用法"><a href="#git-rebase的用法" class="headerlink" title="git rebase的用法"></a><code>git rebase</code>的用法</h2><p><strong>第一种情况: 修改的不是同一个文件</strong>，执行<code>git pull</code>后没有冲突，接着直接执行<code>git rebase</code>就可以了。</p><p>第一种情况只需执行两条命令:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git rebase</span><br></pre></td></tr></table></figure><p><strong>第二种情况: 修改同一个文件, 出现冲突</strong>，这时执行<code>git pull</code>后，会显示需要你手动更改冲突文件，先不要改，而是先执行<code>git add x</code>和<code>git commit -m &quot;y&quot;</code>, 然后再执行<code>git rebase</code>, 然后将冲突文件里的\&lt;\&lt;\&lt;\&lt;HEAD那些无关内容删掉即可, <strong>千万不要做其他改动</strong>，然后执行<code>git rebase --continue</code>就可以了。</p><p>第二种情况需要以下6步</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git add x <span class="comment">//x是冲突文件</span></span><br><span class="line">git commit -m <span class="string">"y"</span> <span class="comment">//y是那个什么</span></span><br><span class="line">git rebase</span><br><span class="line">将冲突文件里的&lt;&lt;&lt;&lt;HEAD那些无关内容删掉</span><br><span class="line">git rebase --<span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>参考：</p><p>[1] <a href="https://www.liaoxuefeng.com/wiki/896043488029600/1216289527823648" target="_blank" rel="noopener">廖雪峰的官方网站_Git教程_Rebase及评论区</a></p><p>[2] <a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="noopener">Git官方文档之分支-变基</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实我用Git不多，&lt;code&gt;git rebase&lt;/code&gt;命令之前也都没听说过，偶然在牛客网看面经看到有人说面试官问&lt;code&gt;git rebase&lt;/code&gt;和&lt;code&gt;git merge&lt;/code&gt;的区别。才想到去了解一下它。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://wmjtxt.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>七月刚来，已经走远</title>
    <link href="https://wmjtxt.github.io/2019/07/07/july/"/>
    <id>https://wmjtxt.github.io/2019/07/07/july/</id>
    <published>2019-07-07T11:31:44.000Z</published>
    <updated>2019-08-20T15:51:02.596Z</updated>
    
    <content type="html"><![CDATA[<p>明天回家。<br><a id="more"></a></p><p>本来准备7月5号回家的，9号去参加同学的婚礼，顺利的话中间还能去趟洛阳。<br>可是4号一大早被老师喊去实验室，一忙就是整整4天。<br>除了实验室的事情，这几天就是折腾系统，其他啥也没干。<br>之前的deepin系统（也就是现在在用的）总算是迁移到了新电脑上。以后就少折腾系统，挺麻烦的，也没啥意义。<br>win10也碰到个问题，不过已经解决，这里就不说了。</p><p>可能七月底才能回学校，而且那时实验室还不一定能装修好，所以可能还是得去图书馆学习。<br>一定要去图书馆。<br>过去的俩月没怎么取图书馆，几乎等于荒废了，在宿舍的学习效率太低了。<br>亡羊补牢，为时不晚。<br>在家也要保持状态，比如刷个题什么的，每天一两个小时就可以。</p><p>Fighting</p><p>ps : 对了，有个地方可以说一下，Deepin clone克隆后的系统，跟原系统相当于是一个系统。<br>比如：他们的Github仓库就是共用的；两个系统同时引导，克隆系统会把原系统覆盖掉。还不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明天回家。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>nc出问题了吗，老是Connection Refused</title>
    <link href="https://wmjtxt.github.io/2019/06/30/nc-Connection-refused/"/>
    <id>https://wmjtxt.github.io/2019/06/30/nc-Connection-refused/</id>
    <published>2019-06-30T14:45:35.000Z</published>
    <updated>2019-08-20T13:59:37.816Z</updated>
    
    <content type="html"><![CDATA[<p><strong>已解决</strong></p><a id="more"></a><p>原来是没有加-p的原因，估计是deepin装的netcat版本太老了。<br>解决办法: 启动nc服务的时候在端口号前加上-p参数:<code>nc -l -p 2000</code>，就可以了。</p><p>以下是原文：</p><p>执行以下最简单的命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l 2000</span><br><span class="line">nc 192.168.1.101 2000</span><br></pre></td></tr></table></figure></p><p>就出现这个错误:<br><code>(UNKNOWN) [192.168.1.101] 2000 (cisco-sccp) : Connection refused</code></p><p>在虚拟机上试了，还是同样的错误。</p><p>启动我自己写的ftp server</p><p><code>./server 192.168.1.101 2000 5 10</code></p><p>再执行</p><p><code>nc 192.168.1.101 2000</code></p><p>可以连接成功。</p><p>但先执行</p><p><code>nc -l 2000</code></p><p>再启动ftp client</p><p><code>./client 192.168.1.101 2000</code></p><p>仍会出现上面的错误。</p><p>所以推测应该是nc的服务器没有正常启动或者类似的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;已解决&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="问题" scheme="https://wmjtxt.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>克隆Deepin系统</title>
    <link href="https://wmjtxt.github.io/2019/06/27/cloneDeepin/"/>
    <id>https://wmjtxt.github.io/2019/06/27/cloneDeepin/</id>
    <published>2019-06-27T08:08:26.000Z</published>
    <updated>2019-08-20T15:42:26.122Z</updated>
    
    <content type="html"><![CDATA[<p>换了新电脑，就想把原来的系统迁移到新电脑上，毕竟新配置一个系统还是挺麻烦的。在论坛搜了一下，看到有说可以clone分区。然后就试了试，开始遇到一些问题，不过后来还是成功了。<br><a id="more"></a></p><p>想看具体步骤可以跳转到<a href="#实施步骤">实施步骤</a>，或者<a href="#精简版">精简版</a> 。</p><p>新电脑是AMD锐龙处理器，自带Windows10，原Deepin系统是在大小110G左右的固态硬盘上，需要把它克隆到一个238G左右的移动固态硬盘。</p><p>然后就遇到一个问题：克隆完成后，将238G的硬盘连到新电脑，无法从该硬盘启动，Boot Device只显示电脑自带的硬盘而不显示外接硬盘，不知道是新电脑的问题还是锐龙处理器的问题，总之就是没办法启动克隆的系统。</p><p>所谓兵来将挡水来土掩，问题总是有解决的办法，很快就想到一个：那就是在电脑自带的硬盘安装一个Deepin系统，由它来引导。果不其然，安装好以后，再启动的时候就可以看到238G硬盘上的系统了，启动它也没什么问题。这样，克隆系统就大功告成。</p><p>ps : 一直以来，我都是用Windows10+Deepin双系统，efi引导启动(引导这块不太懂，我是先装好Windows10，再安装Deepin，然后开机就看到引导界面了，所以应该是Deepin自带的引导程序)。</p><p>至于，为什么我不用Deepin 15.10(以下简称15.10)了？其实先前是打算趁这次换电脑改用Deepin 15.10而放弃原来的Deepin 15.9(下称15.9)的(从15.5开始用，一路升级到15.9)，因为15.10是第一个stable版本，而且原来的unstable版本官方好像是今年7月以后不再更新了。</p><p>所以新电脑一到，我就在238G移动固态上安装了15.10，一开始没发现什么大问题，只是<strong>引导有点问题</strong>：每次从Windows10重启，无法正常进入引导界面。这也许是本地硬盘Windows10+移动硬盘Deepin的问题，也可能是AMD处理器的问题。</p><p>另外，在安装一个vim插件的时候（vim-instant-markdown），需要安装nodejs，而在15.10安装nodejs默认版本是4.8，在15.9安装是8.11，不知道是不是由于这个原因，总之结果就是<strong>vim-instant-markdown在15.10用不了</strong>，尝试了各种方法结果还是不行。</p><p>综上，我就决定暂时放弃15.10了，虽然[解决办法]里在新电脑自带硬盘安装的系统是15.10，但那只是工具而已，以后的主力系统还是15.9。或许以后还有机会再用15.10或者别的linux系统。</p><h3 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h3><p>大致说一下实施步骤，因为我先后尝试了多次，所以这里就不赘述，只说我认为是必要的步骤，如果遇到问题，欢迎留言交流。</p><ul><li><p>1.准备工作</p><ul><li><p>原始系统，简称<strong>Deepin-老大</strong>；目标系统，也就是克隆系统，简称<strong>Deepin-小二</strong>。</p></li><li><p>一个第三方Deepin系统（我是在另一个移动机械硬盘上安装过一个Deepin 15.7，正好派上用场），简称<strong>Deepin-小三</strong>。<br>用live系统应该也可以，不过我没有试。如果在Deepin-老大上执行clone操作的话，会提示有个错误，好像是让你重启进入live系统再clone（我第一次是这样弄的，记不太清了，后来都是在第三方系统clone的）。</p></li><li><p>安装Clone软件（中文名是备份还原工具），在深度商店里就有。</p></li><li><p>在新电脑自带硬盘压缩出一个60G大小的空间并新建分区（这个过程是在自带Windows10系统进行），安装Deepin系统，简称<strong>Deepin-小四</strong>。</p></li></ul></li><li><p>2.克隆系统</p></li></ul><p>打开Clone软件，第一步选择操作介质: 分区，选择介质对应的操作: 克隆分区，然后点击下一步，选择原始分区和目标分区，点击开始克隆，等待完成。</p><ul><li>3.在新电脑启动</li></ul><p>克隆完成后，建议就转移到新电脑，先启动<strong>Deepin-小四</strong>，执行命令<code>sudo update-grub</code>，然后重启就可以进入引导界面，并发现里面有<strong>Deepin-小二</strong>，就说明克隆成功了。</p><p>之所以不建议在旧电脑启动<strong>Deepin-小二</strong>，是因为在旧电脑，<strong>Deepin-老大</strong>和<strong>Deepin-小二</strong>同时存在，引导程序可能对他们在识别上有点问题。<br>我在<strong>Deepin-小三</strong>执行<code>sudo update-grub</code>后，引导程序的确发现了这两个在不同位置的一模一样的系统，但启动的时候不论点击哪一个，似乎启动的都是原来的<strong>Deepin-小二</strong>，应该是<strong>Deepin-小二</strong>把<strong>Deepin-老大</strong>给覆盖了。</p><p>ps : 晚上我又测试了一下，把原系统升级了，15.9.3 unstable –&gt; 15.10.1 stable，看来Deepin支持从unstable直接升级到stable版本了。还有就是升级过后，把<strong>Deepin-小二</strong>和<strong>Deepin-老大</strong>放到一起，开机，系统久久不能启动，大概维持了5分钟。<br>然后，我觉得情况不对劲，就强制关机，把<strong>Deepin-小二</strong>放到新电脑上，开机，提示有些错误，然后执行检查，最后很快正常启动。看来那5分钟旧电脑还是做了些什么，试图区分老大和小二。还好我及时制止了，不然可能要出大事的(认真脸)。<br>算了算了，以后他们还是不要相见了，这让我想起一个电影，好像是叫做《月球》，挺悲伤的。关于克隆，确实有些东西让人（系统）难以接受。</p><ul><li>4.解决Deepin-小二分区大小问题</li></ul><p>启动<strong>Deepin-小二</strong>后，你也许会发现这个问题：<code>df -h</code>命令的结果显示，系统盘大小是110G（原系统Deepin-老大所在分区的大小），而<code>sudo fdisk -l</code>命令显示系统盘分区大小是238G（就是克隆操作目标硬盘的大小）。</p><p>那些多余的空间去哪了？能不能找回来呢？答案是可以！</p><p>只需要执行如下命令：</p><p><code>sudo resize2fs /dev/sda1</code></p><p>其中<code>/dev/sda1</code>是系统<strong>Deepin-小二</strong>所在的分区名字。</p><ul><li>5.领衔主演</li></ul><table><thead><tr><th style="text-align:center">姓名</th><th style="text-align:center">版本</th><th style="text-align:center">系统盘大小</th></tr></thead><tbody><tr><td style="text-align:center">Deepin-老大</td><td style="text-align:center">15.9.3</td><td style="text-align:center">110G</td></tr><tr><td style="text-align:center">Deepin-小二</td><td style="text-align:center">15.9.3</td><td style="text-align:center">238G</td></tr><tr><td style="text-align:center">Deepin-小三</td><td style="text-align:center">15.7.0</td><td style="text-align:center">80G</td></tr><tr><td style="text-align:center">Deepin-小四</td><td style="text-align:center">15.10.1</td><td style="text-align:center">60G</td></tr></tbody></table><h3 id="精简版"><a href="#精简版" class="headerlink" title="精简版"></a>精简版</h3><ul><li>1.在第三方系统上，使用Clone软件将待克隆系统从原始分区克隆到目标分区。</li><li>2.启动克隆系统后，执行<code>sudo resize2fs /dev/sda1</code>，其中<code>/dev/sda1</code>是克隆系统所在的分区名字。</li><li><strong>注意</strong>：不要在原电脑启动克隆系统</li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>还有一些别的办法克隆系统，比如先备份，再还原，不再一一尝试啦，毕竟系统只是工具，弄好了就该办正事了，这才是最重要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;换了新电脑，就想把原来的系统迁移到新电脑上，毕竟新配置一个系统还是挺麻烦的。在论坛搜了一下，看到有说可以clone分区。然后就试了试，开始遇到一些问题，不过后来还是成功了。&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://wmjtxt.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>命名空间Namespace数据成员重复定义问题</title>
    <link href="https://wmjtxt.github.io/2019/04/23/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4namespace%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98/"/>
    <id>https://wmjtxt.github.io/2019/04/23/命名空间namespace数据成员重复定义问题/</id>
    <published>2019-04-23T13:40:14.000Z</published>
    <updated>2019-08-20T15:43:13.570Z</updated>
    
    <content type="html"><![CDATA[<p>C++ Primer终于快看完了。<br><a id="more"></a><br>真是越往后看的越慢，跳过了几章，今天直接看第18章命名空间部分，遇到了一个小问题。如下所示。<br>文件：</p><ul><li><p>np.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __NP_H__ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __NP_H__ </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> np&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NpTest</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">2</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">    <span class="comment">//int np_val;//这样不行，重复定义，用嵌套的匿名空间可以，如下所示(不太清楚为啥。。。)</span></span><br><span class="line">    <span class="keyword">namespace</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> np_val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>np.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"np.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> np;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> np&#123;</span><br><span class="line">    <span class="keyword">void</span> NpTest::print()&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"val = "</span> &lt;&lt; val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span>&#123;</span><br><span class="line">        ++a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"np.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> np;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> np1&#123;</span><br><span class="line">    <span class="keyword">int</span> np_val = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> np1&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ++np_val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NpTest a;</span><br><span class="line">    a.print();</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    add(x);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    np::np_val = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; np::np_val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; np1::np_val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    np1::test();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; np1::np_val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Problem: 其实就是注释的那一行，np_val存在重复定义问题。<br>就是每当np.h被include一次，np_val就被定义一次。<br>但是改成把np_val放到嵌套的匿名空间里就没有问题了。<br>现在还不太理解原因，待后面再看看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++ Primer终于快看完了。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://wmjtxt.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>木夕的诗</title>
    <link href="https://wmjtxt.github.io/2019/04/10/mjpoet/"/>
    <id>https://wmjtxt.github.io/2019/04/10/mjpoet/</id>
    <published>2019-04-10T01:01:34.000Z</published>
    <updated>2019-08-20T15:43:28.970Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/sunset.jpg" alt="sunset"></p><p>一些旧诗，陆续整理中…<br><a id="more"></a></p><h6 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h6><p><a href="#夜思">夜思</a><br><a href></a><br><a href></a><br><a href></a></p><h6 id="夜思"><a href="#夜思" class="headerlink" title="夜思"></a>夜思</h6><p>2009.10.01 于海口<br>黛入秋空忽夜半，窗台露水月如弓。<br>风冲雾里花滴落，雨撞墙根草速生。<br>语逸心烦德不事，情闲意乱道难清。<br>方思铁血南疆撒，岂敢从心荡鼓钟。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/sunset.jpg&quot; alt=&quot;sunset&quot;&gt;&lt;/p&gt;
&lt;p&gt;一些旧诗，陆续整理中…&lt;br&gt;
    
    </summary>
    
    
      <category term="诗歌" scheme="https://wmjtxt.github.io/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>饮酒</title>
    <link href="https://wmjtxt.github.io/2019/03/31/drink/"/>
    <id>https://wmjtxt.github.io/2019/03/31/drink/</id>
    <published>2019-03-31T13:49:40.000Z</published>
    <updated>2019-06-27T07:34:05.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="饮酒"><a href="#饮酒" class="headerlink" title="饮酒"></a>饮酒</h1><p>陶渊明</p><p>结庐在人境，而无车马喧。<br>问君何能尔？心远地自偏。<br>采菊东篱下，悠然见南山。<br>山气日夕佳，飞鸟相与还。<br>此中有真意，欲辨已忘言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;饮酒&quot;&gt;&lt;a href=&quot;#饮酒&quot; class=&quot;headerlink&quot; title=&quot;饮酒&quot;&gt;&lt;/a&gt;饮酒&lt;/h1&gt;&lt;p&gt;陶渊明&lt;/p&gt;
&lt;p&gt;结庐在人境，而无车马喧。&lt;br&gt;问君何能尔？心远地自偏。&lt;br&gt;采菊东篱下，悠然见南山。&lt;br&gt;山气日夕佳，飞鸟相与还
      
    
    </summary>
    
    
      <category term="诗歌" scheme="https://wmjtxt.github.io/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>旧照片</title>
    <link href="https://wmjtxt.github.io/2019/03/30/oldPhotos/"/>
    <id>https://wmjtxt.github.io/2019/03/30/oldPhotos/</id>
    <published>2019-03-30T14:03:30.000Z</published>
    <updated>2019-06-27T07:34:05.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些照片"><a href="#一些照片" class="headerlink" title="一些照片"></a>一些照片</h1><a id="more"></a><p><img src="/myPhoto/20140930_115321.jpg" alt><br><img src="/myPhoto/DSC00483.JPG" alt><br><img src="/myPhoto/DSC00484.JPG" alt><br><img src="/myPhoto/DSC00485.JPG" alt><br><img src="/myPhoto/DSC00486.JPG" alt><br><img src="/myPhoto/DSC00487.JPG" alt><br><img src="/myPhoto/DSC_0134.JPG" alt><br><img src="/myPhoto/DSC_0240.JPG" alt><br><img src="/myPhoto/DSC_0248.JPG" alt><br><img src="/myPhoto/DSC_0254.JPG" alt><br><img src="/myPhoto/DSC_0255.JPG" alt><br><img src="/myPhoto/DSC_0274.JPG" alt><br><img src="/myPhoto/IMG20150626016.jpg" alt><br><img src="/myPhoto/1岁.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一些照片&quot;&gt;&lt;a href=&quot;#一些照片&quot; class=&quot;headerlink&quot; title=&quot;一些照片&quot;&gt;&lt;/a&gt;一些照片&lt;/h1&gt;
    
    </summary>
    
    
      <category term="照片" scheme="https://wmjtxt.github.io/tags/%E7%85%A7%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Reading</title>
    <link href="https://wmjtxt.github.io/2019/03/30/reading/"/>
    <id>https://wmjtxt.github.io/2019/03/30/reading/</id>
    <published>2019-03-30T13:16:37.000Z</published>
    <updated>2019-06-27T07:34:05.892Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/myPhoto/DSC_0274.JPG" alt="pic"></p><h5 id="读书笔记-C-Primer"><a href="#读书笔记-C-Primer" class="headerlink" title="读书笔记 C++ Primer"></a>读书笔记 C++ Primer</h5><p>这本800多页的大块头，我已经翻了很久了。才看一半左右。刚开始的看的很快，一天近百页，两三天后就啃不动了。<br>越到后面新知识越多，也越来越难理解，因为前面几章是基础，后面是各种复杂的东西，容器、动态内存、拷贝控制什么的。<br>不过还是要尽快看。前几天因为实验室还有论文的事情耽误了些时间，后面几天应该没啥事了。专心看书，啃书。看完这本，还有三本……<br>其实不止……比如STL剖析、Linux内核与实现、csapp、EffectiveC++、Redis、MySQL等等。真的是太多书需要看了。</p><a id="more"></a><h5 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h5><p>相机一直在睡觉。</p><p>我的所谓爱好摄影何止是一句空话，简直是真空的。不过今天翻了翻相册，以前拍的照片，质量还不错的（比如文首所示），<br>它们也一直在睡觉。自从拍完回来，从手机或相机的存储卡里拷贝到电脑里，就再也没“惠顾”过他们！</p><p>其实有时间可以多出门拍拍照片，把这个爱好给坐实了！比如上次文学院的同学邀请，就可以去啊，虽然认识的方式略尴尬，但也无伤大雅。<br>也不是以找对象为纯粹目的的啊，做个朋友总是可以的。嗯，有时间问一下。</p><h5 id="找实习"><a href="#找实习" class="headerlink" title="找实习"></a>找实习</h5><p>参加了不少笔试，面试不多，面了的也一个都没过。现状是基础不牢、项目不精，要啥啥不行。还是补基础先。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>兰大双选会其实就是个大型招聘会，是挺不错的，不过跟我们专业关系不太大。</p><p>作息方面，基本上达到要求了，还需要长期坚持。尽量做到不玩手机，虽然现在已经玩的很少了，但还没有完全杜绝。</p><p>个人形象方面，既然丑的事实已经无法改变，那就只能接受，并在其他方面做出补充。比如健身，发型，衣着等等。<br>说到底，我还是一个在意外表的人。以前嘛，不修边幅，对长相还自信，所以也没啥。现在呢，要啥没啥了，天天跟裸奔一样，很不自在。<br>这一点亟待改善。</p><p>就说这么多吧，兰州最近的昼夜温差挺大的，不穿秋裤晚上还挺冷的！</p><p>2019,03,30 二月廿四 星期六</p><p>于兰州</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/myPhoto/DSC_0274.JPG&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;读书笔记-C-Primer&quot;&gt;&lt;a href=&quot;#读书笔记-C-Primer&quot; class=&quot;headerlink&quot; title=&quot;读书笔记 C++ Primer&quot;&gt;&lt;/a&gt;读书笔记 C++ Primer&lt;/h5&gt;&lt;p&gt;这本800多页的大块头，我已经翻了很久了。才看一半左右。刚开始的看的很快，一天近百页，两三天后就啃不动了。&lt;br&gt;越到后面新知识越多，也越来越难理解，因为前面几章是基础，后面是各种复杂的东西，容器、动态内存、拷贝控制什么的。&lt;br&gt;不过还是要尽快看。前几天因为实验室还有论文的事情耽误了些时间，后面几天应该没啥事了。专心看书，啃书。看完这本，还有三本……&lt;br&gt;其实不止……比如STL剖析、Linux内核与实现、csapp、EffectiveC++、Redis、MySQL等等。真的是太多书需要看了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移到Hexo</title>
    <link href="https://wmjtxt.github.io/2019/03/29/blog-transfer-to-Hexo/"/>
    <id>https://wmjtxt.github.io/2019/03/29/blog-transfer-to-Hexo/</id>
    <published>2019-03-29T06:49:54.000Z</published>
    <updated>2019-06-27T07:34:05.892Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/path.jpg" alt="img"></p><p>把博客迁移到<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexo</a>了，主题是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>,<br>比原来的好看，也好用。不过这个主题的作者好像不更新了，以后可以换别的主题试试。<br>其实之前就想试试Hexo，当时安装Node.js出了点问题，就放弃了。这次也碰到问题了，不过参考网上的方法很快解决了，<br><a href="https://www.jianshu.com/p/31744aa44824" target="_blank" rel="noopener">这里是方法链接</a>。</p><a id="more"></a><p>然后，简单了解了一下Hexo的命令，就可以开始使用Hexo啦。原来需要<code>git add/commit/push</code>几条命令才能发布，<br>现在只需要一条命令(<code>hexo g -d</code>)就可以了。</p><p>下面简单说一下步骤。</p><ul><li>安装Node.js, Git</li><li>安装Hexo : <code>npm install hexo-cli -g</code></li><li>Setup your blog : <code>hexo init blog</code> </li><li>进入blog<code>cd blog</code>并下载主题 : <code>git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</code></li><li>选择主题<code>theme: yilia</code></li><li><p>配置<code>/blog/_config.yml</code></p><ul><li><code>new_post_name: year-:month-:day:title.md</code></li><li><code>deploy:</code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repository: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li></ul></li><li><p>常用Hexo命令</p><ul><li>新建博客：<code>hexo new title</code></li><li>发布：<code>hexo g -d</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/path.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;把博客迁移到&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;了，主题是&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yilia&lt;/a&gt;,&lt;br&gt;比原来的好看，也好用。不过这个主题的作者好像不更新了，以后可以换别的主题试试。&lt;br&gt;其实之前就想试试Hexo，当时安装Node.js出了点问题，就放弃了。这次也碰到问题了，不过参考网上的方法很快解决了，&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/31744aa44824&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里是方法链接&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://wmjtxt.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>GDB and Make</title>
    <link href="https://wmjtxt.github.io/2019/03/25/gdb_make/"/>
    <id>https://wmjtxt.github.io/2019/03/25/gdb_make/</id>
    <published>2019-03-25T05:00:00.000Z</published>
    <updated>2019-08-17T15:10:59.585Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href>MySQL</a></li><li><a href>Oracle</a></li><li><a href>poi</a></li><li><a href>epoll</a></li><li><a href>redis</a></li><li><a href>log4cpp</a></li><li><a href>socket</a></li><li><a href>C/S模式</a></li><li><a href>C++, Java, Python</a></li><li><a href>STL</a></li><li><a href>Linux环境编程</a></li><li><a href="#GDB">GDB</a></li><li><a href="#Make">Make</a></li><li><a href>多线程编程</a></li><li><a href>git,github</a></li></ul><a id="more"></a><h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><ul><li><p>1.编译时加上-g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ *.cpp -g</span><br></pre></td></tr></table></figure></li><li><p>2.执行时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gdb a.out</span><br></pre></td></tr></table></figure></li></ul><p>或者分两步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gdb</span><br><span class="line">(gdb)file a.out</span><br></pre></td></tr></table></figure></p><ul><li>命令</li></ul><table><thead><tr><th>命令</th><th>含义</th><th>对应windows</th></tr></thead><tbody><tr><td>l</td><td>显示代码</td><td></td></tr><tr><td>r</td><td>开始运行</td><td>F9</td></tr><tr><td>b 4</td><td>在第四行设置断点</td><td>F5</td></tr><tr><td>info b</td><td>查看所有断点</td><td></td></tr><tr><td>delete [断点号]</td><td>查看所有断点</td><td></td></tr><tr><td>n</td><td>下一步,不进入函数</td><td>F10</td></tr><tr><td>s</td><td>表示单步进入函数</td><td>F11</td></tr><tr><td>p i</td><td>打印变量i</td><td></td></tr><tr><td>c</td><td>继续运行,直到函数结束或遇到新的断点</td><td></td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><h1 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h1><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target: dependency_files</span><br><span class="line">&lt; tab &gt; command</span><br></pre></td></tr></table></figure><p>.PHONY是Makefile文件的关键字，表示它后面列表中的目标均为伪目标。伪目标通常用在清理文件、强制重新编译等情况下</p><p>自定义文件名的话,比如makename执行时在后面加上-f makename</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -f makename</span><br></pre></td></tr></table></figure><p><strong>变量函数与规则</strong></p><p>随着项目越来越大，源文件也越来越复杂，这个时候就要用到变量，写出通用性较强的makefile文件</p><h2 id="定义变量的两种方法"><a href="#定义变量的两种方法" class="headerlink" title="定义变量的两种方法"></a>定义变量的两种方法</h2><ul><li>1.变量名=变量值   递归变量展开（几个变量共享一个值） //不常用</li><li>2.变量名:=变量值  简单变量展开（类似于C++的赋值）    //常用</li></ul><p>变量分为; 用户自定义变量，预定义变量（CFLAGS），自动变量，环境变量</p><p>自动变量：指在使用的时候，自动用特定的值替换，常用的有: </p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>$@</td><td>当前规则的目标文件（重点）</td></tr><tr><td>$&lt;</td><td>当前规则的第一个依赖文件</td></tr><tr><td>$^</td><td>当前规则的所有依赖文件，以空格分隔（重点）</td></tr><tr><td>$?</td><td>规则中日期新于目标文件的所有相关文件列表，逗号分隔</td></tr><tr><td>$(@D)</td><td>目标文件的目录名部分</td></tr><tr><td>$(@F)</td><td>目标文件的文件名部分</td></tr></tbody></table><p>预定义变量：内部事先定义好的变量，但是它的值是固定的，并且有些的值是为空的。</p><ul><li>AR: 库文件打包程序默认为ar</li><li>AS: 汇编程序，默认为as</li><li>CC: c编译器默认为cc</li><li>CPP: C预编译器，默认为$(CC) -E</li><li>CXX: C++编译器，默认为g++</li><li>RM: 删除，默认为rm -f</li><li>ARFLAGS: 库选项，无默认</li><li>ASFLAGS: 汇编选项，无默认</li><li>CFLAGS: c编译器选项，无默认</li><li>CPPFLAGS: c预编译器选项，无默认</li><li>CXXFLAGS: c++编译器选项</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>1.wildcard : 搜索当前目录下的文件名，展开成一列所有符合由其参数描述的文件名，文件间以空格间隔。<br><code>SOURCES=$(wildcard *.cpp)</code>把当前目录下所有.cpp文件存入变量SOURCES里。</p></li><li><p>2.字符串替换函数: $(patsubst要查找的子串，替换后的目标子串，源字符串)。将源字符串(以空格分隔)中的<br>所有要查找的子串替换成目标子串。如OBJS=$(patsubst %.cpp,%.o,$(SOURCES))<br>把SOURCES中的.cpp替换为.o</p></li><li><p>3.$(addprefix 前缀，源字符串)函数把第二个参数列表的每一项前缀上第一个参数值???</p></li></ul><p>下面是一个较为通用的makefile:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">DIR      := ./debug</span><br><span class="line">EXE      := <span class="variable">$(DIR)</span>/main.exe</span><br><span class="line">CC       := g++</span><br><span class="line">LIBS     :=</span><br><span class="line">SRCS     := <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span> <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> <span class="variable">$(<span class="built_in">wildcard</span> *.cc)</span></span><br><span class="line">OCPP     := <span class="variable">$(<span class="built_in">patsubst</span> %.cpp, <span class="variable">$(DIR)</span>/%.o, $(<span class="built_in">wildcard</span> *.cpp)</span>)</span><br><span class="line">OC       := <span class="variable">$(<span class="built_in">patsubst</span> %.c, <span class="variable">$(DIR)</span>/%.co, $(<span class="built_in">wildcard</span> *.c)</span>)</span><br><span class="line">OCC      := <span class="variable">$(<span class="built_in">patsubst</span> %.cc, <span class="variable">$(DIR)</span>/%.cco, $(<span class="built_in">wildcard</span> *.cc)</span>)</span><br><span class="line">OCC      := <span class="variable">$(OC)</span> <span class="variable">$(OCC)</span> <span class="variable">$(OCPP)</span></span><br><span class="line">RM       := rm -rf</span><br><span class="line">CXXFLAGS := -Wall -g</span><br><span class="line">start : mkdebug <span class="variable">$(EXE)</span></span><br><span class="line">mkdebug :</span><br><span class="line">    @if[! -d <span class="variable">$(DIR)</span>]; then mkdir <span class="variable">$(DIR)</span>; fi;</span><br><span class="line"><span class="variable">$(EXE)</span> : <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$(OBJS)</span> <span class="variable">$(<span class="built_in">addprefix</span> -l, <span class="variable">$(LIBS)</span>)</span></span><br><span class="line"><span class="variable">$(DIR)</span>/%.o : %.cpp</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="variable">$(DIR)</span>/%.co : %.c</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="variable">$(DIR)</span>/%.cco : %.cc</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean rebuild</span><br><span class="line">clean :</span><br><span class="line">    @D<span class="variable">$(RM)</span> <span class="variable">$(DIR)</span>/*.exe <span class="variable">$(DIR)</span>/*.o <span class="variable">$(DIR)</span>/*.co <span class="variable">$(DIR)</span>/*.cco</span><br><span class="line">rebuild : clean start</span><br></pre></td></tr></table></figure><h2 id="make的命令行选项"><a href="#make的命令行选项" class="headerlink" title="make的命令行选项"></a>make的命令行选项</h2><table><thead><tr><th>命令格式</th><th>含义</th></tr></thead><tbody><tr><td>-C dir</td><td>读入指定目录下的makefile</td></tr><tr><td>-f file</td><td>读入当前目录下的file文件作为makefile</td></tr><tr><td>-i</td><td>忽略所有的命令行执行错误</td></tr><tr><td>-I dir</td><td>指定被包含的makefile所在目录</td></tr><tr><td>-n</td><td>只打印要执行的命令，但不执行这些命令</td></tr><tr><td>-p</td><td>显示make变量数据库和隐含规则</td></tr><tr><td>-s</td><td>在执行命令时不显示命令</td></tr><tr><td>-w</td><td>如果make在执行过程中改变目录, 则打印当前目录名</td></tr></tbody></table><h2 id="采用for循环编译多个目标文件的Makefile写法"><a href="#采用for循环编译多个目标文件的Makefile写法" class="headerlink" title="采用for循环编译多个目标文件的Makefile写法"></a>采用for循环编译多个目标文件的Makefile写法</h2><p>…</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;Oracle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;poi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;epoll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;log4cpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;socket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;C/S模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;C++, Java, Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;STL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;Linux环境编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#GDB&quot;&gt;GDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Make&quot;&gt;Make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;多线程编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&gt;git,github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wmjtxt.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="C++" scheme="https://wmjtxt.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Find+wc统计代码行数(文件名含空格)</title>
    <link href="https://wmjtxt.github.io/2019/03/25/find_wc/"/>
    <id>https://wmjtxt.github.io/2019/03/25/find_wc/</id>
    <published>2019-03-25T04:00:00.000Z</published>
    <updated>2019-06-27T07:34:05.892Z</updated>
    
    <content type="html"><![CDATA[<p>一开始这样写<code>find . -name &quot;*.cpp&quot; | xargs wc -l</code>，名字有空格的文件无法处理</p><p>后来就在网上找，下面这个方法可以：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br><span class="line">find . -name "*.cpp" -print0 | xargs -0 wc -l</span><br></pre></td></tr></table></figure><p>好像是把空格替换成’\0’了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一开始这样写&lt;code&gt;find . -name &amp;quot;*.cpp&amp;quot; | xargs wc -l&lt;/code&gt;，名字有空格的文件无法处理&lt;/p&gt;
&lt;p&gt;后来就在网上找，下面这个方法可以：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;
      
    
    </summary>
    
    
      <category term="shell" scheme="https://wmjtxt.github.io/tags/shell/"/>
    
      <category term="linux" scheme="https://wmjtxt.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结(持续更新)</title>
    <link href="https://wmjtxt.github.io/2019/03/18/linux_command/"/>
    <id>https://wmjtxt.github.io/2019/03/18/linux_command/</id>
    <published>2019-03-18T04:00:00.000Z</published>
    <updated>2019-09-02T08:42:46.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><a id="more"></a><table><thead><tr><th>命令</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><code>df -h</code></td><td>查看磁盘使用情况</td><td>磁盘</td></tr><tr><td><code>du -ah --max-depth==1</code></td><td>查看当前目录下的文件及文件夹的大小</td><td></td></tr><tr><td><code>du -sh</code></td><td>查看当前文件夹大小</td><td></td></tr><tr><td><code>ls -ltr</code></td><td>按修改时间排序</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件及文件夹个数</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>grep &quot;^-&quot;</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件个数</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>grep &quot;^d&quot;</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件夹个数</td><td></td></tr><tr><td><code>free</code></td><td>查看内存使用情况</td><td>内存</td></tr><tr><td><code>top</code></td><td>实时显示系统运行各项信息，相当于任务管理器</td><td>cpu</td></tr><tr><td><code>ps -ef</code>&#124;<code>grep sth</code></td><td>查看当前运行进程</td><td></td></tr><tr><td><code>rename &#39;s/\.cc$/.cpp/&#39; *.cc</code></td><td>将后缀为.cc的文件后缀修改为.cpp</td><td>批量修改文件名</td></tr><tr><td><code>rename &#39;s/\s/./&#39; *.c</code></td><td>将后缀为.c的文件名中的空格替换为”.”</td><td>批量修改文件名</td></tr><tr><td><code>rename &#39;s/^/00/&#39; [0-9]*</code></td><td>将文件名以数字开头的文件前面加上00</td><td>批量修改文件名</td></tr><tr><td><code>history</code>&#124;<code>awk &#39;{print $2}&#39;</code>&#124;<code>sort</code>&#124;<code>uniq -c</code>&#124;<code>sort -rn</code>&#124;<code>head -15</code></td><td>查看使用频次前15的历史命令</td><td></td></tr><tr><td><code>linuxlogo</code></td><td></td><td></td></tr><tr><td><code>wc [filename]</code></td><td>统计指定文件中的行数、字数、字节数</td><td></td></tr><tr><td><code>usermod -l [新用户名] -d /home/[新用户名] -m [旧用户名]</code></td><td>修改用户名</td><td></td></tr><tr><td><code>ln</code></td><td>链接，软链接，硬链接</td><td></td></tr><tr><td><code>scp</code></td><td>linux之间文件远程传输</td><td></td></tr><tr><td><code>more</code></td><td>与cat类似，可以翻页浏览,空格键下一页，b回上一页</td><td></td></tr><tr><td><code>less</code></td><td>与more类似，还可以使用vi编辑查找</td><td></td></tr><tr><td><code>awk</code></td><td>AWK是一种处理文本文件的语言，是一个强大的文本分析工具</td><td></td></tr><tr><td><code>:%s/foo/bar/g</code></td><td>全文查找替换</td><td></td></tr><tr><td><code>gg=G</code></td><td>vim中代码智能对齐</td><td>vim</td></tr><tr><td><code>nl [file]</code></td><td>查看文件内容，行号计算不包括空行，相当于<code>cat [file] -b</code></td><td></td></tr><tr><td><code>:%!xxd</code></td><td>vim中显示16进制</td><td>vim</td></tr><tr><td><code>:%!xxd -r</code></td><td>vim中从16进制恢复</td><td>vim</td></tr><tr><td><code>sed -i &#39;1,6d&#39; *.cpp</code></td><td>删除所有cpp文件的前六行</td><td></td></tr><tr><td><code>find -mtime -3</code></td><td>查找3天以内修改过的文件</td><td>如果3前面没有-，意思是3天前修改的文件，还有类似的-atime,-mmin</td></tr><tr><td><code>:split</code>, <code>:vsplit</code></td><td>vim分屏</td><td>vim</td></tr><tr><td><code>ifconfig+端口+ip</code></td><td>修改该端口的ip</td><td></td></tr><tr><td><code>nl file</code>==<code>cat -b file</code></td><td></td><td></td></tr><tr><td><code></code></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h1&gt;
    
    </summary>
    
    
      <category term="shell" scheme="https://wmjtxt.github.io/tags/shell/"/>
    
      <category term="c" scheme="https://wmjtxt.github.io/tags/c/"/>
    
      <category term="linux" scheme="https://wmjtxt.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Epoll、Select与poll</title>
    <link href="https://wmjtxt.github.io/2019/03/09/epoll/"/>
    <id>https://wmjtxt.github.io/2019/03/09/epoll/</id>
    <published>2019-03-09T04:00:00.000Z</published>
    <updated>2019-06-27T07:34:05.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-epoll"><a href="#1-epoll" class="headerlink" title="1.epoll"></a>1.epoll</h1><p>epoll是linux特有的I/O复用函数。它在实现和使用上与select、poll有很大差异。</p><ul><li>首先，epoll使用一组函数来完成任务，而不是单个函数。</li><li>其次，epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中，从而无须像select和poll那样每次调用都要重复传入文件描述符集或事件集。</li><li>但epoll需要使用一个额外的文件描述符，来唯一标示内核中的这个事件表。<a id="more"></a></li><li>这个文件描述符使用<code>epoll_create</code>函数来创建：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><p>size参数现在不起作用,只是给内核一个提示，告诉它事件表需要多大。</p><ul><li><code>epoll_ctl</code>用来操作epoll的内核事件表。</li><li><p>epoll系列系统调用的主要接口是<code>epoll_wait</code>函数。</p></li><li><p>epoll对文件描述符的操作有两种模式：LT和ET</p><ul><li>LT（Level Trigger，电平触发）模式是默认的工作模式，在这种模式下epoll相当于一个效率较高的poll。</li><li>ET（Edge Trigger，边沿触发）模式是epoll的高效工作模式。</li></ul></li></ul><h1 id="2-poll"><a href="#2-poll" class="headerlink" title="2.poll"></a>2.poll</h1><p>poll系统调用和select类似，也是在指定时间内轮询一定数量的文件描述符，以测试其中是否有就绪者。poll的原型如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd* fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure></p><ul><li>fds参数是一个pollfd结构类型的数组，它指定所有我们感兴趣的文件描述符上发生的可读、可写和异常等事件。pollfd结构体的定义如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd;         <span class="comment">//文件描述符</span></span><br><span class="line">    <span class="keyword">short</span> events;   <span class="comment">//注册的事件</span></span><br><span class="line">    <span class="keyword">short</span> revents;  <span class="comment">//实际发生的事件，由内核填充</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-select"><a href="#3-select" class="headerlink" title="3.select"></a>3.select</h1><p>select的用途：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写和异常等事件。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout)</span></span>;</span><br></pre></td></tr></table></figure></p><p>其中：</p><ul><li>nfds参数指定被监听的文件描述符的总数。</li><li>readfds,writefds,exceptfds参数分别指向可读、可写和异常等事件对应的文件描述符。</li><li>timeout参数用来设置select函数的超时时间。如果timeout传递NULL，则select将一直阻塞，直到某个文件描述符就绪。</li></ul><table><thead><tr><th style="text-align:center">系统调用</th><th style="text-align:center">select</th><th style="text-align:center">poll</th><th style="text-align:center">epoll</th></tr></thead><tbody><tr><td style="text-align:center">事件集合</td><td style="text-align:center">用户通过3个参数<br>分别传入感兴趣的<br>可读、可写及异常<br>等事件，内核通过<br>对这些参数的在线<br>修改来反馈其中的<br>就绪事件。这使得<br>用户每次调用select<br>都要重置这<br>3个参数</td><td style="text-align:center">统一处理所有事件<br>类型，因此只需<br>一个事件集参数。用<br>户通过pollfd.events<br>传入感兴趣的事件，<br>内核通过修改<br>pollfd.revents反馈<br>其中就绪的事件</td><td style="text-align:center">内核通过一个事件表<br>直接管理用户感兴趣的<br>所有事件。因此每次<br>调用epoll_wait时，<br>无须反复传入用户感<br>兴趣的事件。epoll_wait<br>系统调用的参数events<br>仅用来反馈就绪的事件</td></tr><tr><td style="text-align:center">应用程序索引<br>就绪文件描述符<br>的时间复杂度</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">最大支持<br>文件描述符数</td><td style="text-align:center">一般有最大值限制，1024或2048</td><td style="text-align:center">65535</td><td style="text-align:center">65535</td></tr><tr><td style="text-align:center">工作模式</td><td style="text-align:center">LT</td><td style="text-align:center">LT</td><td style="text-align:center">LT,同时支持ET高效模式</td></tr><tr><td style="text-align:center">内核实现<br>和工作效率</td><td style="text-align:center">采用轮询方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(n)</td><td style="text-align:center">采用轮询方式<br>来检测就绪事件，<br>算法时间复杂度为<br>O(n)</td><td style="text-align:center">采用回调方式来<br>检测就绪事件，<br>算法时间复杂度为<br>O(1)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-epoll&quot;&gt;&lt;a href=&quot;#1-epoll&quot; class=&quot;headerlink&quot; title=&quot;1.epoll&quot;&gt;&lt;/a&gt;1.epoll&lt;/h1&gt;&lt;p&gt;epoll是linux特有的I/O复用函数。它在实现和使用上与select、poll有很大差异。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，epoll使用一组函数来完成任务，而不是单个函数。&lt;/li&gt;
&lt;li&gt;其次，epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中，从而无须像select和poll那样每次调用都要重复传入文件描述符集或事件集。&lt;/li&gt;
&lt;li&gt;但epoll需要使用一个额外的文件描述符，来唯一标示内核中的这个事件表。
    
    </summary>
    
    
      <category term="技术" scheme="https://wmjtxt.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://wmjtxt.github.io/tags/Linux/"/>
    
      <category term="Socket" scheme="https://wmjtxt.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>LeedCode 37.Sudoku Solver</title>
    <link href="https://wmjtxt.github.io/2019/03/07/LeedCode_37_Sudoku_Solver/"/>
    <id>https://wmjtxt.github.io/2019/03/07/LeedCode_37_Sudoku_Solver/</id>
    <published>2019-03-07T04:00:00.000Z</published>
    <updated>2019-06-27T07:34:05.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeedCode-37-Sudoku-Solver"><a href="#LeedCode-37-Sudoku-Solver" class="headerlink" title="LeedCode 37.Sudoku Solver"></a>LeedCode 37.Sudoku Solver</h1><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><a id="more"></a><p>就是数独游戏</p><h1 id="解法思路"><a href="#解法思路" class="headerlink" title="解法思路"></a>解法思路</h1><p>把所有空位置找出来,并找到该位置可以填的数字的集合.针对每个空位置,把其集合中的数字依次填进去验证(这里采用递归):</p><pre><code>* 如果返回flase,就把该位置重新设为空,验证集合中的下一个数字* 直到递归完成,返回true</code></pre><h1 id="解法分析"><a href="#解法分析" class="headerlink" title="解法分析"></a>解法分析</h1><ul><li>方法1: 采用set\&lt;char>存储数字集合,Runtime: 248ms(unordered_set也差不多)</li><li>方法2: 采用vector\&lt;int>表示数字集合,Runtime: 36ms</li><li>方法3: 采用int,位运算表示数字集合,Runtime: 12ms</li><li>可见,能用简单数据结构实现还是最好的</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li><p>方法1:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; tmp;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(board[i][k] != <span class="string">'.'</span>)</span><br><span class="line">                            tmp.insert(board[i][k]);</span><br><span class="line">                        <span class="keyword">if</span>(board[k][j] != <span class="string">'.'</span>)</span><br><span class="line">                            tmp.insert(board[k][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">3</span>; ++m)&#123;</span><br><span class="line">                            <span class="keyword">int</span> ii = i/<span class="number">3</span>*<span class="number">3</span>+k;</span><br><span class="line">                            <span class="keyword">int</span> jj = j/<span class="number">3</span>*<span class="number">3</span>+m;</span><br><span class="line">                            <span class="keyword">if</span>(board[ii][jj] != <span class="string">'.'</span>)&#123;</span><br><span class="line">                                tmp.insert(board[ii][jj]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> c = <span class="string">'1'</span>; c &lt;= <span class="string">'9'</span>; ++c)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(tmp.find(c) == tmp.end())&#123;</span><br><span class="line">                            board[i][j] = c;</span><br><span class="line">                            <span class="keyword">if</span>(solve(board))</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                board[i][j] = <span class="string">'.'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方法2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(board[i][k] != <span class="string">'.'</span>)</span><br><span class="line">                            tmp[board[i][k]-<span class="string">'0'</span><span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(board[k][j] != <span class="string">'.'</span>)</span><br><span class="line">                            tmp[board[k][j]-<span class="string">'0'</span><span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(board[i/<span class="number">3</span>*<span class="number">3</span>+k/<span class="number">3</span>][j/<span class="number">3</span>*<span class="number">3</span>+k%<span class="number">3</span>] != <span class="string">'.'</span>)</span><br><span class="line">                            tmp[board[i/<span class="number">3</span>*<span class="number">3</span>+k/<span class="number">3</span>][j/<span class="number">3</span>*<span class="number">3</span>+k%<span class="number">3</span>]-<span class="string">'0'</span><span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!tmp[k])&#123;</span><br><span class="line">                            board[i][j] = k + <span class="string">'0'</span> + <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">if</span>(solve(board))</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                board[i][j] = <span class="string">'.'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方法3:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">lass Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> row = <span class="number">0x1ff</span>;</span><br><span class="line">                    <span class="keyword">int</span> col = <span class="number">0x1ff</span>;</span><br><span class="line">                    <span class="keyword">int</span> squ = <span class="number">0x1ff</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(board[i][k] != <span class="string">'.'</span>)</span><br><span class="line">                            row ^= <span class="number">1</span> &lt;&lt; (board[i][k] - <span class="number">49</span>);</span><br><span class="line">                        <span class="keyword">if</span>(board[k][j] != <span class="string">'.'</span>)</span><br><span class="line">                            col ^= <span class="number">1</span> &lt;&lt; (board[k][j] - <span class="number">49</span>);</span><br><span class="line">                        <span class="keyword">if</span>(board[i/<span class="number">3</span>*<span class="number">3</span>+k/<span class="number">3</span>][j/<span class="number">3</span>*<span class="number">3</span>+k%<span class="number">3</span>] != <span class="string">'.'</span>)</span><br><span class="line">                            squ ^= <span class="number">1</span> &lt;&lt; (board[i/<span class="number">3</span>*<span class="number">3</span> + k/<span class="number">3</span>][j/<span class="number">3</span>*<span class="number">3</span> + k%<span class="number">3</span>] - <span class="number">49</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">int</span> flag = row &amp; col &amp; squ;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k,flag&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(flag%<span class="number">2</span>)&#123;</span><br><span class="line">                            board[i][j] = k + <span class="string">'0'</span> + <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">if</span>(solve(board))</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                board[i][j] = <span class="string">'.'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LeedCode-37-Sudoku-Solver&quot;&gt;&lt;a href=&quot;#LeedCode-37-Sudoku-Solver&quot; class=&quot;headerlink&quot; title=&quot;LeedCode 37.Sudoku Solver&quot;&gt;&lt;/a&gt;LeedCode 37.Sudoku Solver&lt;/h1&gt;&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://wmjtxt.github.io/tags/LeetCode/"/>
    
      <category term="刷题" scheme="https://wmjtxt.github.io/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
