<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木夕木火のBlog</title>
  
  <subtitle>革命尚未成功，同志仍需努力</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wmjtxt.github.io/"/>
  <updated>2020-04-11T04:56:57.787Z</updated>
  <id>https://wmjtxt.github.io/</id>
  
  <author>
    <name>木夕木火</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>抗疫战争</title>
    <link href="https://wmjtxt.github.io/2020/04/11/kangyi/"/>
    <id>https://wmjtxt.github.io/2020/04/11/kangyi/</id>
    <published>2020-04-11T04:39:15.000Z</published>
    <updated>2020-04-11T04:56:57.787Z</updated>
    
    <content type="html"><![CDATA[<p>过年时，疫情爆发，武汉封城，全国禁足。那时候以为疫情最多一个月也就结束了，由于论文还没写完，在家写的实在太慢，感到很焦急，只希望疫情赶快结束，回校写论文。</p><a id="more"></a><p>后学校发通知，说3月1号前不开学，于是只能在家安心写论文，效率低也得慢慢挤。挤的是真的慢。3月1号左右才基本完成初稿，后来又查重，重复率很高，想尽各种办法降重，提交学校初检，然后送审。送审前的几天家里有点事，正文一点没改就交了。交完才发现，万一盲审不过，后面挺麻烦的，可已经送审出去，也没办法了，只能听天由命。</p><p>3月1日依旧没有开学的消息，甘肃省发通知说3月15日前不开学。3月15日依旧没消息，可能是受到国外疫情的输入病例影响，记得当时兰州有大概几十例，还有一例是从湖北返兰复工确诊的。一直到后来，甘肃省通知4月13日高三先开学，高校毕业年级可先开学，不过学校依旧没有消息。其实现在去学校也没啥事了，论文盲审要一个月左右，所以5.1之后开学也来得及。</p><p>前两天，在院群里让填一个问卷，说第二天研究开学事宜，不过后来还是没有消息。倒是又强调了一遍，不准擅自返校。</p><p>在国内拐点出现、湖北省外基本无新增、湖北新增陆续减少、国内新增降至100以内等等一系列好消息之后，我本以为开学在望，偏偏3月初国外疫情大爆发，远甚于国内，并且有一些国外输入病例。全国机场海关不得不严阵以待，严防输入病例。</p><p>另外，国内还零星发现一些病例，以及一些无症状感染者。自4月1日起，每日报告新增无症状感染者，并继续采取隔离措施（原本无症状的阳性就隔离，只是没公布数量）。现在每天会有几十例无症状感染者，主要还是来自湖北。由于无症状比较难以发现，容易在人群中悄然传播，所以依旧不能放松。这也是这个病毒真正厉害之处。在疫情爆发之初，就曾有无症状感染者，当时就觉得无症状也能传染，实在是防不胜防。我还担心会不会疫情因此难以有效控制，不过好在我国采取了几乎可以说完美的隔离防控措施，很快就控制住了疫情。之后无症状感染也被再提起，并引起重视。可谓乘胜追击，无往不胜。</p><p>国外的爆发，尤其是欧美等国家，实在是出人意料，说他们是猪脑子一点不为过。有我国的前车之鉴在先，他们不仅不重视，而且几乎是反其道而行之，似乎真觉得这病毒只感染亚洲人。</p><p>现在全球140多万，美国50万，拐点还不知道在哪。中国如今就是世界的诺亚方舟。但国外这么严重，我们也难以独善其身，一方面要派援助，捐赠或者出口物资和防护用品，一方面还得严防输入病例，全国上下不敢松一口气。</p><p>4月以来，部分省份的学校开始试点开学，这是对的，总不能一直不开学吧。只是开学后，一旦再发现病例，就要及时采取有效措施。比如隔离、封校等等。代价当然有，但总比坐吃等死强吧。</p><p>论文送审，暂时闲下来，看电视剧看电影玩游戏，真的颓废。</p><p>有时间要开始学学Python了，上次存了几个G的视频和资料，Github上也有不少资源，都可以参考。</p><p>fightingggggggggggggggggggggg</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过年时，疫情爆发，武汉封城，全国禁足。那时候以为疫情最多一个月也就结束了，由于论文还没写完，在家写的实在太慢，感到很焦急，只希望疫情赶快结束，回校写论文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="疫情" scheme="https://wmjtxt.github.io/tags/%E7%96%AB%E6%83%85/"/>
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Python画直方图和点线图及Gephi的使用方法</title>
    <link href="https://wmjtxt.github.io/2020/02/29/Python-matplotlib/"/>
    <id>https://wmjtxt.github.io/2020/02/29/Python-matplotlib/</id>
    <published>2020-02-29T06:16:19.000Z</published>
    <updated>2020-04-11T04:56:08.359Z</updated>
    
    <content type="html"><![CDATA[<p>毕业论文里需要画图，先想到matlab，但之前的安装包用不了，网上有但几个G下载太慢。所以就用了Python。用Python也是一波三折，一开始matplotlib老是安装不了。后来还是在Windows10上弄成了。</p><p>另外，毕业论文是复杂网络社团检测相关的，所以要用Gephi画网络的社团结构划分图，也在这里记录一下。</p><a id="more"></a><h1 id="一、Python画直方图"><a href="#一、Python画直方图" class="headerlink" title="一、Python画直方图"></a>一、Python画直方图</h1><p>直接看例子吧<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> mpl</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'FangSong'</span>] <span class="comment">#设置字体</span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">k = [<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.3</span>,<span class="number">0.3</span>]</span><br><span class="line">d = [<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>]</span><br><span class="line">l = [<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.5</span>]</span><br><span class="line">p = [<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.4</span>]</span><br><span class="line">f = [<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.6</span>,<span class="number">0.6</span>]</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(</span><br><span class="line">        [k,d,l,p,f],</span><br><span class="line">        index=[<span class="string">'K'</span>,<span class="string">'D'</span>,<span class="string">'L'</span>,<span class="string">'P'</span>,<span class="string">'F'</span>],</span><br><span class="line">        columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>]</span><br><span class="line">        )</span><br><span class="line"><span class="comment">#data.hist()</span></span><br><span class="line">data.plot.bar(rot=<span class="number">0</span>) <span class="comment">#rot设置坐标轴文字的方向</span></span><br><span class="line"><span class="comment">#data.plot.barh()</span></span><br><span class="line">plt.title(<span class="string">"Title"</span>)</span><br><span class="line"><span class="comment">#plt.ylim(0,0.8) #y轴的范围</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="/images/zhifang.png" alt="直方图"></p><h1 id="二、Python画点线图"><a href="#二、Python画点线图" class="headerlink" title="二、Python画点线图"></a>二、Python画点线图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> mpl</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'FangSong'</span>]</span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"title"</span>)</span><br><span class="line"></span><br><span class="line">x = [<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.6</span>,<span class="number">0.7</span>]</span><br><span class="line"></span><br><span class="line">y1 = [<span class="number">1</span>,<span class="number">0.9</span>,<span class="number">0.8</span>,<span class="number">0.6</span>,<span class="number">0.3</span>]</span><br><span class="line">y2 = [<span class="number">1</span>,<span class="number">0.9</span>,<span class="number">0.9</span>,<span class="number">0.6</span>,<span class="number">0.2</span>]</span><br><span class="line">y3 = [<span class="number">1</span>,<span class="number">0.9</span>,<span class="number">0.7</span>,<span class="number">0.4</span>,<span class="number">0.0</span>]</span><br><span class="line">y4 = [<span class="number">1</span>,<span class="number">0.9</span>,<span class="number">0.7</span>,<span class="number">0.3</span>,<span class="number">0.0</span>]</span><br><span class="line"><span class="comment"># 下面几行的gbcr表示颜色</span></span><br><span class="line"><span class="comment"># ×s^v表示点的格式</span></span><br><span class="line"><span class="comment"># 后面的-表示画线，不加-的话只画点图了</span></span><br><span class="line">plt.plot(x,y1,<span class="string">'g*-'</span>,label=<span class="string">'A'</span>) </span><br><span class="line">plt.plot(x,y2,<span class="string">'bs-'</span>,label=<span class="string">'B'</span>)</span><br><span class="line">plt.plot(x,y3,<span class="string">'c^-'</span>,label=<span class="string">'C'</span>)</span><br><span class="line">plt.plot(x,y4,<span class="string">'rv-'</span>,label=<span class="string">'D'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">r'$\mu$'</span>) <span class="comment">#x轴标签为希腊字母谬</span></span><br><span class="line">plt.ylabel(<span class="string">'Q'</span>)</span><br><span class="line">plt.xlim(<span class="number">0.3</span>,<span class="number">0.7</span>)<span class="comment">#设置x轴范围</span></span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果：<br><img src="/images/dianxian.png" alt="点线图"></p><h1 id="三、Gephi的使用步骤"><a href="#三、Gephi的使用步骤" class="headerlink" title="三、Gephi的使用步骤"></a>三、Gephi的使用步骤</h1><p>以Karate网络为例</p><h4 id="1-添加网络的邻接表-格式为csv"><a href="#1-添加网络的邻接表-格式为csv" class="headerlink" title="1.添加网络的邻接表, 格式为csv"></a>1.添加网络的邻接表, 格式为csv</h4><p><img src="/images/matplotlib1.png" alt="1"><br>选择图的类型：无向的，选New workspace</p><h4 id="2-添加网络的社团划分-格式为csv"><a href="#2-添加网络的社团划分-格式为csv" class="headerlink" title="2.添加网络的社团划分, 格式为csv"></a>2.添加网络的社团划分, 格式为csv</h4><p><img src="/images/matplotlib3.png" alt="2"><br>选择图的类型：无向的，选Append to existing workspace</p><h4 id="3-调整参数，选择布局，调整网络图"><a href="#3-调整参数，选择布局，调整网络图" class="headerlink" title="3.调整参数，选择布局，调整网络图"></a>3.调整参数，选择布局，调整网络图</h4><p><img src="/images/matplotlib4.png" alt="3"></p><h4 id="4-结果"><a href="#4-结果" class="headerlink" title="4.结果"></a>4.结果</h4><p><img src="/images/karate.png" alt="karate"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕业论文里需要画图，先想到matlab，但之前的安装包用不了，网上有但几个G下载太慢。所以就用了Python。用Python也是一波三折，一开始matplotlib老是安装不了。后来还是在Windows10上弄成了。&lt;/p&gt;
&lt;p&gt;另外，毕业论文是复杂网络社团检测相关的，所以要用Gephi画网络的社团结构划分图，也在这里记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://wmjtxt.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>木夕的诗</title>
    <link href="https://wmjtxt.github.io/2019/04/10/mjpoet/"/>
    <id>https://wmjtxt.github.io/2019/04/10/mjpoet/</id>
    <published>2019-04-10T01:01:34.000Z</published>
    <updated>2020-04-11T04:57:18.815Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/sunset.jpg" alt="sunset"></p><p>一些旧诗<br><a id="more"></a></p><h6 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h6><p><a href="#夜思">夜思(2009.10.01于海口)</a><br><a href></a><br><a href></a><br><a href></a></p><h6 id="夜思"><a href="#夜思" class="headerlink" title="夜思"></a>夜思</h6><p>2009.10.01 于海口<br>黛入秋空忽夜半，窗台露水月如弓。<br>风冲雾里花滴落，雨撞墙根草速生。<br>语逸心烦德不事，情闲意乱道难清。<br>方思铁血南疆撒，岂敢从心荡鼓钟。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/sunset.jpg&quot; alt=&quot;sunset&quot;&gt;&lt;/p&gt;
&lt;p&gt;一些旧诗&lt;br&gt;
    
    </summary>
    
    
      <category term="诗歌" scheme="https://wmjtxt.github.io/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结(持续更新)</title>
    <link href="https://wmjtxt.github.io/2019/03/18/linux_command/"/>
    <id>https://wmjtxt.github.io/2019/03/18/linux_command/</id>
    <published>2019-03-18T04:00:00.000Z</published>
    <updated>2019-12-04T08:48:40.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><a id="more"></a><table><thead><tr><th>命令</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><code>df -h</code></td><td>查看磁盘使用情况</td><td>磁盘</td></tr><tr><td><code>du -ah --max-depth==1</code></td><td>查看当前目录下的文件及文件夹的大小</td><td></td></tr><tr><td><code>du -sh</code></td><td>查看当前文件夹大小</td><td></td></tr><tr><td><code>ls -ltr</code></td><td>按修改时间排序</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件及文件夹个数</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>grep &quot;^-&quot;</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件个数</td><td></td></tr><tr><td><code>ls -l</code>&#124;<code>grep &quot;^d&quot;</code>&#124;<code>wc -l</code></td><td>查看当前文件夹下文件夹个数</td><td></td></tr><tr><td><code>free</code></td><td>查看内存使用情况</td><td>内存</td></tr><tr><td><code>top</code></td><td>实时显示系统运行各项信息，相当于任务管理器</td><td>cpu</td></tr><tr><td><code>ps -ef</code>&#124;<code>grep sth</code></td><td>查看当前运行进程</td><td></td></tr><tr><td><code>rename &#39;s/\.cc$/.cpp/&#39; *.cc</code></td><td>将后缀为.cc的文件后缀修改为.cpp</td><td>批量修改文件名</td></tr><tr><td><code>rename &#39;s/\s/./&#39; *.c</code></td><td>将后缀为.c的文件名中的空格替换为”.”</td><td>批量修改文件名</td></tr><tr><td><code>rename &#39;s/^/00/&#39; [0-9]*</code></td><td>将文件名以数字开头的文件前面加上00</td><td>批量修改文件名</td></tr><tr><td><code>history</code>&#124;<code>awk &#39;{print $2}&#39;</code>&#124;<code>sort</code>&#124;<code>uniq -c</code>&#124;<code>sort -rn</code>&#124;<code>head -15</code></td><td>查看使用频次前15的历史命令</td><td></td></tr><tr><td><code>linuxlogo</code></td><td></td><td></td></tr><tr><td><code>wc [filename]</code></td><td>统计指定文件中的行数、字数、字节数</td><td></td></tr><tr><td><code>usermod -l [新用户名] -d /home/[新用户名] -m [旧用户名]</code></td><td>修改用户名</td><td></td></tr><tr><td><code>ln</code></td><td>链接，软链接，硬链接</td><td></td></tr><tr><td><code>scp</code></td><td>linux之间文件远程传输</td><td></td></tr><tr><td><code>more</code></td><td>与cat类似，可以翻页浏览,空格键下一页，b回上一页</td><td></td></tr><tr><td><code>less</code></td><td>与more类似，还可以使用vi编辑查找</td><td></td></tr><tr><td><code>awk</code></td><td>AWK是一种处理文本文件的语言，是一个强大的文本分析工具</td><td></td></tr><tr><td><code>:%s/foo/bar/g</code></td><td>全文查找替换</td><td></td></tr><tr><td><code>gg=G</code></td><td>vim中代码智能对齐</td><td>vim</td></tr><tr><td><code>nl [file]</code></td><td>查看文件内容，行号计算不包括空行，相当于<code>cat [file] -b</code></td><td></td></tr><tr><td><code>:%!xxd</code></td><td>vim中显示16进制</td><td>vim</td></tr><tr><td><code>:%!xxd -r</code></td><td>vim中从16进制恢复</td><td>vim</td></tr><tr><td><code>sed -i &#39;1,6d&#39; *.cpp</code></td><td>删除所有cpp文件的前六行</td><td></td></tr><tr><td><code>find -mtime -3</code></td><td>查找3天以内修改过的文件</td><td>如果3前面没有-，意思是3天前修改的文件，还有类似的-atime,-mmin</td></tr><tr><td><code>:split</code>, <code>:vsplit</code></td><td>vim分屏</td><td>vim</td></tr><tr><td><code>ifconfig+端口+ip</code></td><td>修改该端口的ip</td><td></td></tr><tr><td><code>nl file</code>==<code>cat -b file</code></td><td></td><td></td></tr><tr><td><code>:%s/\d\+/\=submatch(0)-1/g</code></td><td>vim中数字批量减1</td><td>vim</td></tr><tr><td><code>:50,100s/hello//gn</code></td><td>统计从50行到100行hello出现的次数</td><td></td></tr><tr><td><code></code></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h1&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wmjtxt.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="https://wmjtxt.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 438.Find All Anagrams in a String</title>
    <link href="https://wmjtxt.github.io/2019/03/06/LeedCode_438/"/>
    <id>https://wmjtxt.github.io/2019/03/06/LeedCode_438/</id>
    <published>2019-03-06T04:00:00.000Z</published>
    <updated>2020-04-11T04:56:09.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="438-Find-All-Anagrams-in-a-String"><a href="#438-Find-All-Anagrams-in-a-String" class="headerlink" title="438.Find All Anagrams in a String"></a>438.Find All Anagrams in a String</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><a id="more"></a><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter.</p><p>给定一个字符串s和一个非空字符串p，在s中查找p的变位词的所有起始索引。字符串仅由小写英文字母组成，字符串s和p的长度将不大于20,100。输出顺序无关紧要。 </p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始，我只当是字符串匹配来做了，做出来发现最后一个超时，又加了KMP，还是超时。后来也有了想法，只是花太多时间了，就没有再去写，于是参考大神的解法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法1(没有AC，并且考虑不周全)：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findAnagrams(<span class="built_in">string</span> s, <span class="built_in">string</span> p) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> m = p.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; dict;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e : p)</span><br><span class="line">            dict.insert(e);</span><br><span class="line">        sort(p.begin(), p.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n-m; ++i)&#123;</span><br><span class="line">            <span class="built_in">string</span> tmp = s.substr(i,m);</span><br><span class="line">            <span class="comment">//cout &lt;&lt; tmp &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dict.find(tmp[j]) == dict.end())&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(tmp.begin(), tmp.end());</span><br><span class="line">            <span class="keyword">if</span>(j == m)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p == tmp)&#123;</span><br><span class="line">                    res.push_back(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i += j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法2(滑动窗口)：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findAnagrams(<span class="built_in">string</span> s, <span class="built_in">string</span> p) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pv(<span class="number">26</span>,<span class="number">0</span>), sv(<span class="number">26</span>,<span class="number">0</span>), res;</span><br><span class="line">        <span class="keyword">if</span>(s.size() &lt; p.size())</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ++pv[p[i]-<span class="string">'a'</span>];</span><br><span class="line">            ++sv[s[i]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pv == sv)</span><br><span class="line">           res.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = p.size(); i &lt; s.size(); ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            ++sv[s[i]-<span class="string">'a'</span>];</span><br><span class="line">            --sv[s[i-p.size()]-<span class="string">'a'</span>]; </span><br><span class="line">            <span class="keyword">if</span>(pv == sv)</span><br><span class="line">                res.push_back(i-p.size()+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;438-Find-All-Anagrams-in-a-String&quot;&gt;&lt;a href=&quot;#438-Find-All-Anagrams-in-a-String&quot; class=&quot;headerlink&quot; title=&quot;438.Find All Anagrams in a String&quot;&gt;&lt;/a&gt;438.Find All Anagrams in a String&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述:&quot;&gt;&lt;/a&gt;题目描述:&lt;/h2&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://wmjtxt.github.io/tags/LeetCode/"/>
    
      <category term="刷题" scheme="https://wmjtxt.github.io/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>LPA算法C++实现及模块度计算</title>
    <link href="https://wmjtxt.github.io/2018/11/12/lpa%E7%AE%97%E6%B3%95c++%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%A8%A1%E5%9D%97%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    <id>https://wmjtxt.github.io/2018/11/12/lpa算法c++实现及模块度计算/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-11-22T04:06:24.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，<br>因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。</p><a id="more"></a><p>我先看的LPA（毕竟算法思想最简单,hhh，怪我太笨了），又看了Louvain。<br>Louvain算法的代码，作者在文章里给了网址，是C++写的，我下到本地运行并认真研究了一下，写的真挺好的。<br>然后昨天突发奇想，干脆自己仿照Louvain的代码风格，用C++把LPA实现一下，<br>因为在网上只看到过Python和Java实现的LPA算法，还没见过C++实现的。</p><p>然后昨天把框架写好，今天把细节补全，最后又从Louvain的代码里搬来了模块度的计算部分。<br>最后调试好，就OK啦。</p><h1 id="1-LPA基本思想"><a href="#1-LPA基本思想" class="headerlink" title="1.LPA基本思想"></a>1.LPA基本思想</h1><p>给每一个节点添加标签，初始时可以以各自的nodeid作为标签，标签传播过程中将一个节点的邻居节点的标签中<br>数量最多的标签作为该节点的标签。标签即代表所属社区。</p><ul><li>1 初始时，给每个节点一个标签，通常以其id作为初始标签。</li><li>2 每个节点使用其邻居节点的标签中数量最多的标签更新自身标签。</li><li>3 反复执行步骤2，直到满足终止条件。(至于终止条件是什么，这个可以自己设置,<br>  比如我就直接设定迭代5次结束，也可以根据每次迭代模块度的增加程度来设定，<br>  网上有说直到每个节点的标签不再变化为止，其实这比较难判定，<br>  而且据研究，大部分网络经过5次迭代，其95%的节点标签都不再变化，<br>  后面每次迭代虽部分标签还在变化，但相比来说性价比不高了)</li></ul><p>LPA算法的优点是收敛周期很短，而且不需要任何先验知识。时间复杂度接近线性：对节点分配标签为O(n)，<br>每次迭代需要遍历所有的边两次，也就是O(2m)，所以时间复杂度为O(n+2m)，其中n为节点数，m为边数。</p><p>同步更新和异步更新还没搞懂，回头看看再说。</p><p><strong>缺点</strong> </p><ul><li>1 由于迭代过程中可能会出现随机选择的情况，所以LPA算法具有不稳定性，也就是同一个网络每次执行的结果可能都不一样。</li><li>2 可能出现巨型社区。</li></ul><p><strong>算法改进思路</strong></p><ul><li>目前还没</li></ul><h1 id="2-数据集"><a href="#2-数据集" class="headerlink" title="2.数据集"></a>2.数据集</h1><p><strong><em>dolphins</em></strong></p><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><p>代码都在<a href="https://github.com/wmjtxt/LPA.git" target="_blank" rel="noopener">我的github</a>上, 下面仅列出main函数代码.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lpa.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_time</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> rawtime;</span><br><span class="line">time ( &amp;rawtime );</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; str &lt;&lt; <span class="string">" : "</span> &lt;&lt; ctime (&amp;rawtime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//parse_args(argc, argv);</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">"argc not 2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> filename = argv[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"filename = "</span> &lt;&lt; filename &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">time_t</span> time_begin, time_end;</span><br><span class="line">time(&amp;time_begin);</span><br><span class="line">display_time(<span class="string">"start"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sleep(3);</span></span><br><span class="line"><span class="function">LPA <span class="title">lpa</span><span class="params">(filename)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始模块度 = "</span> &lt;&lt; lpa.modularity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">lpa.labeled();</span><br><span class="line">lpa.display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">display_time(<span class="string">"end"</span>);</span><br><span class="line"></span><br><span class="line">time(&amp;time_end);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4.运行结果"></a>4.运行结果</h1><p><img src="/images/lpa1.png" alt="运行结果1"><br><img src="/images/lpa2.png" alt="运行结果2"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这学期开始看社团检测的东西，了解了一些经典算法。比如GN算法，BGLL算法(又叫Louvain，&lt;br&gt;因为该算法是作者在Louvain大学时提出的)，LPA算法，等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="复杂网络" scheme="https://wmjtxt.github.io/tags/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C/"/>
    
      <category term="LPA" scheme="https://wmjtxt.github.io/tags/LPA/"/>
    
  </entry>
  
  <entry>
    <title>安装YouCompleteMe</title>
    <link href="https://wmjtxt.github.io/2018/05/14/%E5%9C%A8deepin%E4%B8%8A%E5%AE%89%E8%A3%85YouCompleteMe/"/>
    <id>https://wmjtxt.github.io/2018/05/14/在deepin上安装YouCompleteMe/</id>
    <published>2018-05-13T16:00:00.000Z</published>
    <updated>2020-04-11T04:57:37.879Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">https://github.com/Valloric/YouCompleteMe</a></p><ul><li><p>1.安装Vundle</p><ul><li><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li><li><p>把以下内容复制到.vimrc:</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible              " be iMproved, required</span><br><span class="line">filetype off                  " required</span><br><span class="line"></span><br><span class="line">" set the runtime path to include Vundle and initialize</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">" alternatively, pass a path where Vundle should install plugins</span><br><span class="line">"call vundle#begin('~/some/path/here')</span><br><span class="line"></span><br><span class="line">" let Vundle manage Vundle, required</span><br><span class="line">Plugin 'VundleVim/Vundle.vim'</span><br><span class="line"></span><br><span class="line">" The following are examples of different formats supported.</span><br><span class="line">" Keep Plugin commands between vundle#begin/end.</span><br><span class="line">" plugin on GitHub repo</span><br><span class="line">Plugin 'tpope/vim-fugitive'</span><br><span class="line">" plugin from http://vim-scripts.org/vim/scripts.html</span><br><span class="line">" Plugin 'L9'</span><br><span class="line">" Git plugin not hosted on GitHub</span><br><span class="line">Plugin 'git://git.wincent.com/command-t.git'</span><br><span class="line">" git repos on your local machine (i.e. when working on your own plugin)</span><br><span class="line">"Plugin 'file:///home/gmarik/path/to/plugin'</span><br><span class="line">" The sparkup vim script is in a subdirectory of this repo called vim.</span><br><span class="line">" Pass the path to set the runtimepath properly.</span><br><span class="line">Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span><br><span class="line">" Install L9 and avoid a Naming conflict if you've already installed a</span><br><span class="line">" different version somewhere else.</span><br><span class="line">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span><br><span class="line"></span><br><span class="line">" All of your Plugins must be added before the following line</span><br><span class="line">call vundle#end()            " required</span><br><span class="line">filetype plugin indent on    " required</span><br><span class="line">" To ignore plugin indent changes, instead use:</span><br><span class="line">"filetype plugin on</span><br><span class="line">"</span><br><span class="line">" Brief help</span><br><span class="line">" :PluginList       - lists configured plugins</span><br><span class="line">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span><br><span class="line">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span><br><span class="line">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span><br><span class="line">"</span><br><span class="line">" see :h vundle for more details or wiki for FAQ</span><br><span class="line">" Put your non-Plugin stuff after this line</span><br></pre></td></tr></table></figure></li><li><p>Install Plugins: 打开vim执行<code>:PluginInstall</code> 或者直接输入命令<code>sudo vim +PluginInstall +qall</code></p></li></ul></li><li>2.Install development tools and CMake:<ul><li><code>sudo apt-get install build-essential cmake</code></li></ul></li><li>3.Make sure you have Python headers installed:<ul><li><code>sudo apt-get install python-dev python3-dev</code></li></ul></li><li>4.安装clang<ul><li><code>sudo apt-get install clang</code></li></ul></li><li>5.Compiling YCM with semantic support for C-family languages:<ul><li><code>git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/bundle/YouCompleteMe</code></li><li><code>cd ~/.vim/bundle/YouCompleteMe</code></li><li><code>./install.py --clang-completer</code></li><li>如果出错执行 <code>git submodule update --init --recursive</code></li></ul></li><li><p>6.把以下内容复制到.vimrc中</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">"----------------------------"</span><br><span class="line">"------ YouCompleteMe -------"</span><br><span class="line">"----------------------------"</span><br><span class="line">let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" YouCompleteMe</span><br><span class="line">set runtimepath+=~/.vim/bundle/YouCompleteMe</span><br><span class="line">let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM 基于标签引擎</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全</span><br><span class="line">let g:syntastic_ignore_files=[".*\.py$"]</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全</span><br><span class="line">let g:ycm_complete_in_comments = 1</span><br><span class="line">let g:ycm_confirm_extra_conf = 0</span><br><span class="line">let g:ycm_key_list_select_completion = ['&lt;c-n&gt;', '&lt;Down&gt;']  " 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.</span><br><span class="line">let g:ycm_key_list_previous_completion = ['&lt;c-p&gt;', '&lt;Up&gt;']</span><br><span class="line">let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全</span><br><span class="line">let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全</span><br><span class="line">let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span><br><span class="line">let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查</span><br><span class="line">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? "\&lt;C-y&gt;" : "\&lt;CR&gt;" |            " 回车即选中当前项</span><br><span class="line">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;|     " 跳转到定义处</span><br><span class="line">"let g:ycm_min_num_of_chars_for_completion=2                 " 从第2个键入字符就开始罗列匹配项</span><br></pre></td></tr></table></figure></li></ul><p>按说这样应该就可以用了，不过提示有错误。</p><p><code>YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.</code></p><p>在网上找了好久，试了好多方法，最终还是按深度社区的方法才解决。<br><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=43716" target="_blank" rel="noopener">编译安装vim8.0,添加python支持</a></p><ul><li>1.<code>vim --version|grep python</code> 查看是否支持python</li><li>2.<code>sudo apt-get install python-dev python3-dev libncurses5-dev</code>，前面安装过python-dev python3-dev,这里会提示已是最新版本</li><li>3.<code>git clone https://github.com/vim/vim.git</code></li><li>4.<code>cd ~/vim</code></li><li>5.<code>./configure --with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ --enable-multibyte --enable-cscope      --prefix=/usr/local/vim/</code>,这里python2.7和python3.6要跟你安装的版本相对应</li><li>6.<code>sudo make &amp;&amp; sudo make install</code></li><li>7.<code>which vim</code>查看vim安装位置，我的是/usr/bin/vim，然后<code>sudo cp /usr/local/vim/bin/vim /usr/bin/</code></li></ul><p>截图:</p><p><img src="/images/YouCompleteMe.JPG" alt="YCM"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考&lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Valloric/YouCompleteMe&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.安装Vundle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把以下内容复制到.vimrc:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://wmjtxt.github.io/tags/Linux/"/>
    
      <category term="vim" scheme="https://wmjtxt.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Some Notes of 201804</title>
    <link href="https://wmjtxt.github.io/2018/04/11/WMJTXT/"/>
    <id>https://wmjtxt.github.io/2018/04/11/WMJTXT/</id>
    <published>2018-04-10T16:00:00.000Z</published>
    <updated>2020-04-11T04:57:02.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些笔记"><a href="#一些笔记" class="headerlink" title="一些笔记"></a>一些笔记</h1><h1 id="2018-4-11"><a href="#2018-4-11" class="headerlink" title="2018.4.11"></a>2018.4.11</h1><a id="more"></a><p>做了百度的笔试题，交了，也不知道结果会如何。<br>好多题的答案都是网上找的，虽然我也做了测试和整合，但所做实在寥寥。<br>真的有太多东西需要学习、复习、温习、练习了。</p><p>fighting</p><p>由于前段时间整理数据时的失误，上学期做的很多东西都没了，<br>包括用Java做的JDBC导入数据和用MySQL对数据做的分析。<br>今天尝试重写MySQL的部分，好难，回忆又回忆不起来，<br>重新思考吧，又因为那个项目已经不做了，没有压力太难进入状态。<br>这个只能先放放，先去做更重要的事情吧。</p><p>Good night!</p><hr><h1 id="2018-4-13"><a href="#2018-4-13" class="headerlink" title="2018.4.13"></a>2018.4.13</h1><p>昨天老师们宣布接到个项目，接下来一个多月都得忙起来了，学习时间会更少。</p><p>今天上午课间接到百度的电面，半个小时左右，表现一般。正好这期间老师点名了，回来后正好被他看到，被怼了几句，下课去解释了下，还好。这老师刀子嘴豆腐心吧。<br>晚上是七牛的笔试，答的也一般，五道大题只答出两道，其中一道还没答全。</p><p>接下来是今日头条、58以及晨星的笔试，抽空再复习下吧。不能都裸考。通过笔试和电面，也发现自己的知识很不牢固，以前会的都忘了。</p><p>偶尔放松可以，不能玩物丧志。</p><p>ps:用这个不知道怎么排版呐，就这样先将就着吧。</p><p>对了，兰马没有中签，意料之中，但天气转暖了，还是要跑步，锻炼身体。还有，少熬夜吧。</p><hr><h1 id="2018-4-17"><a href="#2018-4-17" class="headerlink" title="2018.4.17"></a>2018.4.17</h1><p><strong>转变思维</strong></p><p>一直以来，虽然大部分时候我是用C++，可还是C的思维。虽然之前学了vector,map等数据结构，可很少用。刷题的时候，我总是首先想到用数组，或者写个函数，而没有想过用C++里已有的那些数据结构。</p><p>还是要多写多用。vector,map,string。这样也可以加快解题速度，不然刷题太慢了。也要多看别人的代码，学习其中的解题思路和思维。</p><hr><h1 id="2018-4-19"><a href="#2018-4-19" class="headerlink" title="2018.4.19"></a>2018.4.19</h1><p>这两天咽炎复发，真难受。lz太干了，要多喝水。</p><p>昨天晨星的笔试，题量有点大，没做完，又是最后两道编程题没做。事先该看一下题型的，应该捡分多的先做。</p><ul><li>总的来说，有三个方面需要加强。<ul><li>1.基础知识（数据结构、操作系统、计算机组成、网络、SQL等基础知识）<strong>这个要多看书和网上总结的资料</strong></li><li>2.算法和数据结构（线性表、链表、队列和栈、树、图以及各种排序等）<strong>这个同上，还要把代码弄熟</strong></li><li>3.编程技巧（一些编程思想和工具的使用，如递归、栈、hash、动规以及C++里的vector、map等的应用）<strong>这个要多刷题，并学习大神的解题方法</strong></li></ul></li></ul><p>Fighting</p><hr><p>=======</p><hr><h1 id="2018-4-20"><a href="#2018-4-20" class="headerlink" title="2018.4.20"></a>2018.4.20</h1><p>热感冒完了是冷感冒。难受。</p><p>昨天晚上做了爱奇艺的，没做完，今天晚上做了美团的，也没做完。还花了半小时做了知乎的。所以美团晚了半小时开始做，导致没做完。快手实在没办法，只能放弃了。为什么都赶到一块了呢。反正过去了。基础知识还是不牢，美团选择题里还有考到SVM的，虽然学过，可都忘光了。对了，我报的机器学习/数据挖掘岗。暂告一段落。<br>还是要多看书。后面也许还有别的笔试，虽然可能性很小了，而且公司越来越少了。</p><hr><h1 id="2018-4-23"><a href="#2018-4-23" class="headerlink" title="2018.4.23"></a>2018.4.23</h1><p>今天又下雨，降温。病差不多好了，还要多注意点，添衣加衣喝水。时间过得太快了。</p><p>昨天看了动态规划，今天做了几道题。感觉还行，但是难的题我依然想不出解法，只能参考别人的。慢慢来吧。LeetCode和牛客网的在线编程题都不错，上面有讨论，如果不会，可以参考大神们的代码。</p><p>今天下午随便看了看linux和shell编程的东西。这块也很有用。</p><p>时间很宝贵，要珍惜啊。</p><p>顺便：实验室的项目都是做文字性的东西，也不能不做。尽量高效的去做吧，时间真的不多了。</p><hr><h1 id="2018-4-27"><a href="#2018-4-27" class="headerlink" title="2018.4.27"></a>2018.4.27</h1><p>快放假了。可是实验室还有任务，学习任务也很重。不能出去玩了。真没意思。</p><p>最近装了个在虚拟机里装了个deepin，界面很漂亮，喜欢，想买个电脑了。在虚拟机里太卡了。唉，还是先提高技术吧。看着桌上还没翻过的书，真是亚历山大。</p><p>所以列了个五月学习任务清单<code>task201805.md</code>。还是好好学习吧，其他的先不要想。</p><p>ps:有时间要跑步了，病都好了，别再偷懒。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一些笔记&quot;&gt;&lt;a href=&quot;#一些笔记&quot; class=&quot;headerlink&quot; title=&quot;一些笔记&quot;&gt;&lt;/a&gt;一些笔记&lt;/h1&gt;&lt;h1 id=&quot;2018-4-11&quot;&gt;&lt;a href=&quot;#2018-4-11&quot; class=&quot;headerlink&quot; title=&quot;2018.4.11&quot;&gt;&lt;/a&gt;2018.4.11&lt;/h1&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://wmjtxt.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
